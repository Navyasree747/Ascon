//
// Generated by Bluespec Compiler, version untagged-g2930c314 (build 2930c314)
//
// On Tue Nov 12 11:41:49 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_input_function             O     1 const
// ciphertext                     O   128 reg
// RDY_ciphertext                 O     1 reg
// tag                            O   128 reg
// RDY_tag                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// input_function_plaintext       I   128 reg
// input_function_associated_data  I   128 reg
// input_function_key             I   128 reg
// input_function_nonce           I   128 reg
// EN_input_function              I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAscon_engine(CLK,
		      RST_N,

		      input_function_plaintext,
		      input_function_associated_data,
		      input_function_key,
		      input_function_nonce,
		      EN_input_function,
		      RDY_input_function,

		      ciphertext,
		      RDY_ciphertext,

		      tag,
		      RDY_tag);
  input  CLK;
  input  RST_N;

  // action method input_function
  input  [127 : 0] input_function_plaintext;
  input  [127 : 0] input_function_associated_data;
  input  [127 : 0] input_function_key;
  input  [127 : 0] input_function_nonce;
  input  EN_input_function;
  output RDY_input_function;

  // value method ciphertext
  output [127 : 0] ciphertext;
  output RDY_ciphertext;

  // value method tag
  output [127 : 0] tag;
  output RDY_tag;

  // signals for module outputs
  wire [127 : 0] ciphertext, tag;
  wire RDY_ciphertext, RDY_input_function, RDY_tag;

  // register counter
  reg [3 : 0] counter;
  reg [3 : 0] counter_D_IN;
  wire counter_EN;

  // register fsm_state
  reg [2 : 0] fsm_state;
  reg [2 : 0] fsm_state_D_IN;
  wire fsm_state_EN;

  // register iv_constant
  reg [63 : 0] iv_constant;
  wire [63 : 0] iv_constant_D_IN;
  wire iv_constant_EN;

  // register ready_ciphertext
  reg ready_ciphertext;
  wire ready_ciphertext_D_IN, ready_ciphertext_EN;

  // register ready_tag
  reg ready_tag;
  wire ready_tag_D_IN, ready_tag_EN;

  // register req_associated_data
  reg req_associated_data;
  wire req_associated_data_D_IN, req_associated_data_EN;

  // register rg_encrypted_data_0
  reg [63 : 0] rg_encrypted_data_0;
  wire [63 : 0] rg_encrypted_data_0_D_IN;
  wire rg_encrypted_data_0_EN;

  // register rg_encrypted_data_1
  reg [63 : 0] rg_encrypted_data_1;
  wire [63 : 0] rg_encrypted_data_1_D_IN;
  wire rg_encrypted_data_1_EN;

  // register rg_encryption_tag_0
  reg [63 : 0] rg_encryption_tag_0;
  wire [63 : 0] rg_encryption_tag_0_D_IN;
  wire rg_encryption_tag_0_EN;

  // register rg_encryption_tag_1
  reg [63 : 0] rg_encryption_tag_1;
  wire [63 : 0] rg_encryption_tag_1_D_IN;
  wire rg_encryption_tag_1_EN;

  // register rg_interface_0
  reg [127 : 0] rg_interface_0;
  wire [127 : 0] rg_interface_0_D_IN;
  wire rg_interface_0_EN;

  // register rg_interface_1
  reg [127 : 0] rg_interface_1;
  wire [127 : 0] rg_interface_1_D_IN;
  wire rg_interface_1_EN;

  // register rg_interface_2
  reg [127 : 0] rg_interface_2;
  wire [127 : 0] rg_interface_2_D_IN;
  wire rg_interface_2_EN;

  // register rg_interface_3
  reg [127 : 0] rg_interface_3;
  wire [127 : 0] rg_interface_3_D_IN;
  wire rg_interface_3_EN;

  // register rg_state_0
  reg [63 : 0] rg_state_0;
  reg [63 : 0] rg_state_0_D_IN;
  wire rg_state_0_EN;

  // register rg_state_1
  reg [63 : 0] rg_state_1;
  reg [63 : 0] rg_state_1_D_IN;
  wire rg_state_1_EN;

  // register rg_state_2
  reg [63 : 0] rg_state_2;
  reg [63 : 0] rg_state_2_D_IN;
  wire rg_state_2_EN;

  // register rg_state_3
  reg [63 : 0] rg_state_3;
  reg [63 : 0] rg_state_3_D_IN;
  wire rg_state_3_EN;

  // register rg_state_4
  reg [63 : 0] rg_state_4;
  reg [63 : 0] rg_state_4_D_IN;
  wire rg_state_4_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_associated_data_state,
       CAN_FIRE_RL_encryption_state,
       CAN_FIRE_RL_finalization_state,
       CAN_FIRE_RL_intialization_state,
       CAN_FIRE_RL_permutate_associated_data_state,
       CAN_FIRE_RL_permutate_encrypted_data_state,
       CAN_FIRE_input_function,
       WILL_FIRE_RL_associated_data_state,
       WILL_FIRE_RL_encryption_state,
       WILL_FIRE_RL_finalization_state,
       WILL_FIRE_RL_intialization_state,
       WILL_FIRE_RL_permutate_associated_data_state,
       WILL_FIRE_RL_permutate_encrypted_data_state,
       WILL_FIRE_input_function;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_rg_state_0_write_1__VAL_1,
		MUX_rg_state_0_write_1__VAL_3,
		MUX_rg_state_0_write_1__VAL_4,
		MUX_rg_state_0_write_1__VAL_5,
		MUX_rg_state_0_write_1__VAL_6,
		MUX_rg_state_1_write_1__VAL_1,
		MUX_rg_state_1_write_1__VAL_3,
		MUX_rg_state_1_write_1__VAL_4,
		MUX_rg_state_1_write_1__VAL_5,
		MUX_rg_state_1_write_1__VAL_6,
		MUX_rg_state_2_write_1__VAL_1,
		MUX_rg_state_2_write_1__VAL_2,
		MUX_rg_state_2_write_1__VAL_5,
		MUX_rg_state_2_write_1__VAL_6,
		MUX_rg_state_3_write_1__VAL_1,
		MUX_rg_state_3_write_1__VAL_2,
		MUX_rg_state_3_write_1__VAL_5,
		MUX_rg_state_3_write_1__VAL_6,
		MUX_rg_state_4_write_1__VAL_2,
		MUX_rg_state_4_write_1__VAL_4,
		MUX_rg_state_4_write_1__VAL_5,
		MUX_rg_state_4_write_1__VAL_6;
  wire [3 : 0] MUX_counter_write_1__VAL_2,
	       MUX_counter_write_1__VAL_4,
	       MUX_counter_write_1__VAL_5;
  wire MUX_counter_write_1__SEL_1,
       MUX_counter_write_1__SEL_2,
       MUX_counter_write_1__SEL_3,
       MUX_fsm_state_write_1__SEL_2,
       MUX_fsm_state_write_1__SEL_3,
       MUX_fsm_state_write_1__SEL_4,
       MUX_fsm_state_write_1__SEL_5,
       MUX_fsm_state_write_1__SEL_6,
       MUX_fsm_state_write_1__SEL_7,
       MUX_rg_state_0_write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] y__h18100, y__h23211;
  wire [319 : 0] _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_44_XOR__ETC___d248,
		 lv_finalized_key__h22041,
		 lv_updated_finalized_data__h22007,
		 packed_pre_finalized_data__h21335,
		 padded_key__h1252,
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49;
  wire [63 : 0] IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94,
		INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76,
		INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84,
		INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181,
		INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189,
		INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d278,
		din__h10413,
		encryption0__h16082,
		encryption1__h16083,
		encryption_tag0__h26646,
		encryption_tag1__h26647,
		rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136,
		rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d260,
		rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198,
		rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206,
		rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d281,
		rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143,
		rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151,
		rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219,
		rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d266,
		rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165,
		rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d275,
		x__h11626,
		x__h15826,
		x__h16020,
		x__h18966,
		x__h18968,
		x__h18970,
		x__h18972,
		x__h19093,
		x__h19095,
		x__h19097,
		x__h19099,
		x__h19101,
		x__h19103,
		x__h19233,
		x__h19307,
		x__h19309,
		x__h19643,
		x__h19884,
		x__h20125,
		x__h20366,
		x__h24077,
		x__h24079,
		x__h24081,
		x__h24083,
		x__h24085,
		x__h24204,
		x__h24206,
		x__h24208,
		x__h24210,
		x__h24212,
		x__h24214,
		x__h24344,
		x__h24346,
		x__h24348,
		x__h24418,
		x__h24420,
		x__h24422,
		x__h24424,
		x__h24426,
		x__h24428,
		x__h24534,
		x__h24536,
		x__h24538,
		x__h24540,
		x__h24754,
		x__h24995,
		x__h25236,
		x__h25477,
		x__h25718,
		x__h25720,
		x__h4174,
		x__h4176,
		x__h4178,
		x__h4180,
		x__h4182,
		x__h4184,
		x__h4301,
		x__h4303,
		x__h4305,
		x__h4307,
		x__h4309,
		x__h4311,
		x__h4441,
		x__h4443,
		x__h4445,
		x__h4515,
		x__h4517,
		x__h4519,
		x__h4521,
		x__h4523,
		x__h4525,
		x__h4631,
		x__h4633,
		x__h4635,
		x__h4851,
		x__h5092,
		x__h5333,
		x__h5574,
		x__h5815,
		x__h7099,
		y__h18975,
		y__h19098,
		y__h19106,
		y__h19644,
		y__h19646,
		y__h19885,
		y__h19887,
		y__h20126,
		y__h20128,
		y__h20367,
		y__h20369,
		y__h24086,
		y__h24209,
		y__h24213,
		y__h24217,
		y__h24429,
		y__h24537,
		y__h24755,
		y__h24757,
		y__h24996,
		y__h24998,
		y__h25237,
		y__h25239,
		y__h25478,
		y__h25480,
		y__h25719,
		y__h25721,
		y__h4179,
		y__h4183,
		y__h4306,
		y__h4310,
		y__h4314,
		y__h4526,
		y__h4852,
		y__h4854,
		y__h5093,
		y__h5095,
		y__h5334,
		y__h5336,
		y__h5575,
		y__h5577,
		y__h5816,
		y__h5818;
  wire [3 : 0] x__h18116, x__h23227, x__h26558;
  wire counter_ULT_12___d4;

  // action method input_function
  assign RDY_input_function = 1'd1 ;
  assign CAN_FIRE_input_function = 1'd1 ;
  assign WILL_FIRE_input_function = EN_input_function ;

  // value method ciphertext
  assign ciphertext = { rg_encrypted_data_1, rg_encrypted_data_0 } ;
  assign RDY_ciphertext = ready_ciphertext ;

  // value method tag
  assign tag = { rg_encryption_tag_1, rg_encryption_tag_0 } ;
  assign RDY_tag = ready_tag ;

  // rule RL_intialization_state
  assign CAN_FIRE_RL_intialization_state = fsm_state == 3'd1 ;
  assign WILL_FIRE_RL_intialization_state = CAN_FIRE_RL_intialization_state ;

  // rule RL_associated_data_state
  assign CAN_FIRE_RL_associated_data_state = fsm_state == 3'd2 ;
  assign WILL_FIRE_RL_associated_data_state =
	     CAN_FIRE_RL_associated_data_state ;

  // rule RL_permutate_associated_data_state
  assign CAN_FIRE_RL_permutate_associated_data_state = fsm_state == 3'd3 ;
  assign WILL_FIRE_RL_permutate_associated_data_state =
	     CAN_FIRE_RL_permutate_associated_data_state ;

  // rule RL_encryption_state
  assign CAN_FIRE_RL_encryption_state = fsm_state == 3'd4 ;
  assign WILL_FIRE_RL_encryption_state = CAN_FIRE_RL_encryption_state ;

  // rule RL_permutate_encrypted_data_state
  assign CAN_FIRE_RL_permutate_encrypted_data_state = fsm_state == 3'd6 ;
  assign WILL_FIRE_RL_permutate_encrypted_data_state =
	     CAN_FIRE_RL_permutate_encrypted_data_state ;

  // rule RL_finalization_state
  assign CAN_FIRE_RL_finalization_state = fsm_state == 3'd7 ;
  assign WILL_FIRE_RL_finalization_state = CAN_FIRE_RL_finalization_state ;

  // inputs to muxes for submodule ports
  assign MUX_counter_write_1__SEL_1 =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ;
  assign MUX_counter_write_1__SEL_2 =
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ;
  assign MUX_counter_write_1__SEL_3 =
	     WILL_FIRE_RL_permutate_encrypted_data_state ||
	     WILL_FIRE_RL_permutate_associated_data_state ;
  assign MUX_fsm_state_write_1__SEL_2 =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 ;
  assign MUX_fsm_state_write_1__SEL_3 =
	     WILL_FIRE_RL_permutate_encrypted_data_state && counter == 4'd8 ;
  assign MUX_fsm_state_write_1__SEL_4 =
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ;
  assign MUX_fsm_state_write_1__SEL_5 =
	     WILL_FIRE_RL_permutate_associated_data_state && counter == 4'd8 ;
  assign MUX_fsm_state_write_1__SEL_6 =
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter == 4'd8 ;
  assign MUX_fsm_state_write_1__SEL_7 =
	     WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4 ;
  assign MUX_rg_state_0_write_1__SEL_2 =
	     WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8 ;
  assign MUX_counter_write_1__VAL_2 = (counter == 4'd8) ? 4'd0 : x__h26558 ;
  assign MUX_counter_write_1__VAL_4 = counter_ULT_12___d4 ? x__h26558 : 4'd0 ;
  assign MUX_counter_write_1__VAL_5 = (counter == 4'd0) ? x__h26558 : 4'd0 ;
  assign MUX_rg_state_0_write_1__VAL_1 = x__h24754 ^ y__h24755 ;
  assign MUX_rg_state_0_write_1__VAL_3 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[319:256] ;
  assign MUX_rg_state_0_write_1__VAL_4 =
	     req_associated_data ?
	       x__h7099 :
	       ((counter == 4'd8) ?
		  din__h10413 :
		  rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151) ;
  assign MUX_rg_state_0_write_1__VAL_5 =
	     (counter == 4'd0) ? x__h15826 : rg_state_0 ;
  assign MUX_rg_state_0_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_44_XOR__ETC___d248[319:256] :
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151 ;
  assign MUX_rg_state_1_write_1__VAL_1 = x__h24995 ^ y__h24996 ;
  assign MUX_rg_state_1_write_1__VAL_3 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[255:192] ;
  assign MUX_rg_state_1_write_1__VAL_4 =
	     req_associated_data ?
	       x__h11626 :
	       ((counter == 4'd8) ?
		  rg_state_1 :
		  rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173) ;
  assign MUX_rg_state_1_write_1__VAL_5 =
	     (counter == 4'd0) ? x__h16020 : rg_state_1 ;
  assign MUX_rg_state_1_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_44_XOR__ETC___d248[255:192] :
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173 ;
  assign MUX_rg_state_2_write_1__VAL_1 = x__h25236 ^ y__h25237 ;
  assign MUX_rg_state_2_write_1__VAL_2 =
	     (counter == 4'd8) ?
	       rg_state_2 :
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189 ;
  assign MUX_rg_state_2_write_1__VAL_5 =
	     counter_ULT_12___d4 ?
	       INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[191:128] ;
  assign MUX_rg_state_2_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_44_XOR__ETC___d248[191:128] :
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189 ;
  assign MUX_rg_state_3_write_1__VAL_1 = x__h25477 ^ y__h25478 ;
  assign MUX_rg_state_3_write_1__VAL_2 =
	     (counter == 4'd8) ?
	       rg_state_3 :
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206 ;
  assign MUX_rg_state_3_write_1__VAL_5 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[127:64] ;
  assign MUX_rg_state_3_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_44_XOR__ETC___d248[127:64] :
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206 ;
  assign MUX_rg_state_4_write_1__VAL_2 =
	     (counter == 4'd8) ?
	       rg_state_4 :
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219 ;
  assign MUX_rg_state_4_write_1__VAL_4 =
	     { rg_state_4[63:1], ~rg_state_4[0] } ;
  assign MUX_rg_state_4_write_1__VAL_5 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[63:0] ;
  assign MUX_rg_state_4_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_44_XOR__ETC___d248[63:0] :
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219 ;

  // register counter
  always@(MUX_counter_write_1__SEL_1 or
	  x__h26558 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_counter_write_1__VAL_2 or
	  MUX_counter_write_1__SEL_3 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_counter_write_1__VAL_4 or
	  WILL_FIRE_RL_encryption_state or MUX_counter_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1: counter_D_IN = x__h26558;
      MUX_counter_write_1__SEL_2: counter_D_IN = MUX_counter_write_1__VAL_2;
      MUX_counter_write_1__SEL_3: counter_D_IN = MUX_counter_write_1__VAL_2;
      WILL_FIRE_RL_intialization_state:
	  counter_D_IN = MUX_counter_write_1__VAL_4;
      WILL_FIRE_RL_encryption_state:
	  counter_D_IN = MUX_counter_write_1__VAL_5;
      default: counter_D_IN = 4'b0 /* unspecified value */ ;
    endcase
  end
  assign counter_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_encrypted_data_state ||
	     WILL_FIRE_RL_permutate_associated_data_state ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_encryption_state ;

  // register fsm_state
  always@(EN_input_function or
	  MUX_fsm_state_write_1__SEL_2 or
	  MUX_fsm_state_write_1__SEL_3 or
	  MUX_fsm_state_write_1__SEL_4 or
	  MUX_fsm_state_write_1__SEL_5 or
	  MUX_fsm_state_write_1__SEL_6 or MUX_fsm_state_write_1__SEL_7)
  case (1'b1)
    EN_input_function: fsm_state_D_IN = 3'd1;
    MUX_fsm_state_write_1__SEL_2: fsm_state_D_IN = 3'd0;
    MUX_fsm_state_write_1__SEL_3: fsm_state_D_IN = 3'd7;
    MUX_fsm_state_write_1__SEL_4: fsm_state_D_IN = 3'd6;
    MUX_fsm_state_write_1__SEL_5: fsm_state_D_IN = 3'd4;
    MUX_fsm_state_write_1__SEL_6: fsm_state_D_IN = 3'd3;
    MUX_fsm_state_write_1__SEL_7: fsm_state_D_IN = 3'd2;
    default: fsm_state_D_IN = 3'b0 /* unspecified value */ ;
  endcase
  assign fsm_state_EN =
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter == 4'd8 ||
	     WILL_FIRE_RL_permutate_encrypted_data_state && counter == 4'd8 ||
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ||
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 ||
	     WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter == 4'd8 ||
	     EN_input_function ;

  // register iv_constant
  assign iv_constant_D_IN = 64'h0 ;
  assign iv_constant_EN = 1'b0 ;

  // register ready_ciphertext
  assign ready_ciphertext_D_IN = 1'd1 ;
  assign ready_ciphertext_EN = MUX_fsm_state_write_1__SEL_4 ;

  // register ready_tag
  assign ready_tag_D_IN = 1'd1 ;
  assign ready_tag_EN = MUX_fsm_state_write_1__SEL_2 ;

  // register req_associated_data
  assign req_associated_data_D_IN = 1'd0 ;
  assign req_associated_data_EN =
	     WILL_FIRE_RL_associated_data_state && req_associated_data ;

  // register rg_encrypted_data_0
  assign rg_encrypted_data_0_D_IN = rg_state_1 ;
  assign rg_encrypted_data_0_EN = MUX_fsm_state_write_1__SEL_4 ;

  // register rg_encrypted_data_1
  assign rg_encrypted_data_1_D_IN = rg_state_0 ;
  assign rg_encrypted_data_1_EN = MUX_fsm_state_write_1__SEL_4 ;

  // register rg_encryption_tag_0
  assign rg_encryption_tag_0_D_IN = encryption_tag1__h26647 ;
  assign rg_encryption_tag_0_EN = MUX_fsm_state_write_1__SEL_2 ;

  // register rg_encryption_tag_1
  assign rg_encryption_tag_1_D_IN = encryption_tag0__h26646 ;
  assign rg_encryption_tag_1_EN = MUX_fsm_state_write_1__SEL_2 ;

  // register rg_interface_0
  assign rg_interface_0_D_IN = input_function_key ;
  assign rg_interface_0_EN = EN_input_function ;

  // register rg_interface_1
  assign rg_interface_1_D_IN = input_function_plaintext ;
  assign rg_interface_1_EN = EN_input_function ;

  // register rg_interface_2
  assign rg_interface_2_D_IN = input_function_associated_data ;
  assign rg_interface_2_EN = EN_input_function ;

  // register rg_interface_3
  assign rg_interface_3_D_IN = input_function_nonce ;
  assign rg_interface_3_EN = EN_input_function ;

  // register rg_state_0
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_0_write_1__VAL_1 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_0_write_1__VAL_3 or
	  WILL_FIRE_RL_associated_data_state or
	  MUX_rg_state_0_write_1__VAL_4 or
	  WILL_FIRE_RL_encryption_state or
	  MUX_rg_state_0_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypted_data_state or
	  MUX_rg_state_0_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_1;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_0_D_IN =
	      rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151;
      WILL_FIRE_RL_intialization_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_3;
      WILL_FIRE_RL_associated_data_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_4;
      WILL_FIRE_RL_encryption_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypted_data_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_6;
      default: rg_state_0_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_0_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_associated_data_state ||
	     WILL_FIRE_RL_encryption_state ||
	     WILL_FIRE_RL_permutate_encrypted_data_state ;

  // register rg_state_1
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_1_write_1__VAL_1 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_1_write_1__VAL_3 or
	  WILL_FIRE_RL_associated_data_state or
	  MUX_rg_state_1_write_1__VAL_4 or
	  WILL_FIRE_RL_encryption_state or
	  MUX_rg_state_1_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypted_data_state or
	  MUX_rg_state_1_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_1;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_1_D_IN =
	      rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173;
      WILL_FIRE_RL_intialization_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_3;
      WILL_FIRE_RL_associated_data_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_4;
      WILL_FIRE_RL_encryption_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypted_data_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_6;
      default: rg_state_1_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_1_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_associated_data_state ||
	     WILL_FIRE_RL_encryption_state ||
	     WILL_FIRE_RL_permutate_encrypted_data_state ;

  // register rg_state_2
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_2_write_1__VAL_1 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_rg_state_2_write_1__VAL_2 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189 or
	  MUX_fsm_state_write_1__SEL_4 or
	  rg_state_2 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_2_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypted_data_state or
	  MUX_rg_state_2_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_1;
      MUX_counter_write_1__SEL_2:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_2;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_2_D_IN =
	      INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189;
      MUX_fsm_state_write_1__SEL_4: rg_state_2_D_IN = rg_state_2;
      WILL_FIRE_RL_intialization_state:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypted_data_state:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_6;
      default: rg_state_2_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_2_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_permutate_encrypted_data_state ;

  // register rg_state_3
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_3_write_1__VAL_1 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_rg_state_3_write_1__VAL_2 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206 or
	  MUX_fsm_state_write_1__SEL_4 or
	  rg_state_3 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_3_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypted_data_state or
	  MUX_rg_state_3_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_1;
      MUX_counter_write_1__SEL_2:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_2;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_3_D_IN =
	      rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206;
      MUX_fsm_state_write_1__SEL_4: rg_state_3_D_IN = rg_state_3;
      WILL_FIRE_RL_intialization_state:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypted_data_state:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_6;
      default: rg_state_3_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_3_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_permutate_encrypted_data_state ;

  // register rg_state_4
  always@(MUX_counter_write_1__SEL_1 or
	  rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_rg_state_4_write_1__VAL_2 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  MUX_fsm_state_write_1__SEL_4 or
	  MUX_rg_state_4_write_1__VAL_4 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_4_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypted_data_state or
	  MUX_rg_state_4_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_4_D_IN =
	      rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219;
      MUX_counter_write_1__SEL_2:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_2;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_4_D_IN =
	      rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219;
      MUX_fsm_state_write_1__SEL_4:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_4;
      WILL_FIRE_RL_intialization_state:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypted_data_state:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_6;
      default: rg_state_4_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_4_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_permutate_encrypted_data_state ;

  // remaining internal signals
  assign IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 =
	     (counter == 4'd0) ? iv_constant : rg_state_0 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 =
	     (counter == 4'd0) ? rg_interface_0[127:64] : rg_state_1 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23 =
	     (counter == 4'd0) ? rg_interface_0[63:0] : rg_state_2 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23 ^
	     y__h23211 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 =
	     (counter == 4'd0) ? rg_interface_3[127:64] : rg_state_3 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102 =
	     x__h5574 ^ y__h5575 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108 =
	     x__h4631 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 =
	     (counter == 4'd0) ? rg_interface_3[63:0] : rg_state_4 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116 =
	     x__h5815 ^ y__h5816 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37 =
	     x__h4174 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45 =
	     x__h4851 ^ y__h4852 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61 =
	     x__h4301 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69 =
	     x__h5092 ^ y__h5093 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94 =
	     x__h4515 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76 =
	     ~(x__h4441 ^
	       IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15) ;
  assign INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84 =
	     x__h5333 ^ y__h5334 ;
  assign INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181 =
	     ~(x__h19233 ^ rg_state_1) ;
  assign INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189 =
	     x__h20125 ^ y__h20126 ;
  assign INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d278 =
	     ~(x__h24344 ^ rg_state_1) ;
  assign _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_44_XOR__ETC___d248 =
	     lv_finalized_key__h22041 ^ lv_updated_finalized_data__h22007 ;
  assign counter_ULT_12___d4 = counter < 4'd12 ;
  assign din__h10413 = { ~rg_state_0[63], rg_state_0[62:0] } ;
  assign encryption0__h16082 = rg_interface_1[127:64] ^ rg_state_0 ;
  assign encryption1__h16083 = rg_interface_1[63:0] ^ rg_state_1 ;
  assign encryption_tag0__h26646 = rg_interface_0[127:64] ^ rg_state_3 ;
  assign encryption_tag1__h26647 = rg_interface_0[63:0] ^ rg_state_4 ;
  assign lv_finalized_key__h22041 = { 128'b0, rg_interface_0, 64'b0 } ;
  assign lv_updated_finalized_data__h22007 =
	     { ~rg_state_0[63],
	       rg_state_0[62:0],
	       rg_state_1,
	       rg_state_2,
	       rg_state_3,
	       rg_state_4 } ;
  assign packed_pre_finalized_data__h21335 =
	     { rg_state_0, rg_state_1, rg_state_2, rg_state_3, rg_state_4 } ;
  assign padded_key__h1252 = { 192'b0, rg_interface_0 } ;
  assign rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49 =
	     packed_pre_finalized_data__h21335 ^ padded_key__h1252 ;
  assign rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 =
	     rg_state_2 ^ y__h18100 ;
  assign rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d260 =
	     rg_state_2 ^ y__h23211 ;
  assign rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198 =
	     x__h19307 ^ rg_state_0 ;
  assign rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206 =
	     x__h20366 ^ y__h20367 ;
  assign rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d281 =
	     x__h24418 ^ rg_state_0 ;
  assign rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143 =
	     x__h18966 ^ rg_state_0 ;
  assign rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151 =
	     x__h19643 ^ y__h19644 ;
  assign rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219 =
	     x__h25718 ^ y__h25719 ;
  assign rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d266 =
	     x__h24077 ^ rg_state_0 ;
  assign rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165 =
	     x__h19093 ^ rg_state_0 ;
  assign rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173 =
	     x__h19884 ^ y__h19885 ;
  assign rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d275 =
	     x__h24204 ^ rg_state_0 ;
  assign x__h11626 = rg_interface_2[63:0] ^ rg_state_1 ;
  assign x__h15826 = rg_interface_1[63:0] ^ rg_state_0 ;
  assign x__h16020 = rg_interface_1[127:64] ^ rg_state_1 ;
  assign x__h18116 = 4'd7 - counter ;
  assign x__h18966 = x__h18968 ^ rg_state_1 ;
  assign x__h18968 = x__h18970 ^ y__h24537 ;
  assign x__h18970 =
	     x__h18972 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 ;
  assign x__h18972 = x__h24085 ^ y__h18975 ;
  assign x__h19093 = x__h19095 ^ rg_state_1 ;
  assign x__h19095 = x__h19097 ^ y__h19098 ;
  assign x__h19097 =
	     x__h19099 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 ;
  assign x__h19099 = x__h19101 ^ y__h24213 ;
  assign x__h19101 = x__h19103 ^ rg_state_3 ;
  assign x__h19103 = rg_state_4 ^ y__h19106 ;
  assign x__h19233 =
	     x__h24346 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 ;
  assign x__h19307 = x__h19309 ^ rg_state_1 ;
  assign x__h19309 =
	     x__h24422 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 ;
  assign x__h19643 =
	     rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143 ^
	     y__h19646 ;
  assign x__h19884 =
	     rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165 ^
	     y__h19887 ;
  assign x__h20125 =
	     INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181 ^
	     y__h20128 ;
  assign x__h20366 =
	     rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198 ^
	     y__h20369 ;
  assign x__h23227 = 4'd11 - counter ;
  assign x__h24077 = x__h24079 ^ rg_state_1 ;
  assign x__h24079 = x__h24081 ^ y__h24537 ;
  assign x__h24081 =
	     x__h24083 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d260 ;
  assign x__h24083 = x__h24085 ^ y__h24086 ;
  assign x__h24085 = x__h24540 ^ rg_state_3 ;
  assign x__h24204 = x__h24206 ^ rg_state_1 ;
  assign x__h24206 = x__h24208 ^ y__h24209 ;
  assign x__h24208 =
	     x__h24210 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d260 ;
  assign x__h24210 = x__h24212 ^ y__h24213 ;
  assign x__h24212 = x__h24214 ^ rg_state_3 ;
  assign x__h24214 = rg_state_4 ^ y__h24217 ;
  assign x__h24344 =
	     x__h24346 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d260 ;
  assign x__h24346 = x__h24348 ^ rg_state_4 ;
  assign x__h24348 = rg_state_4 & rg_state_3 ;
  assign x__h24418 = x__h24420 ^ rg_state_1 ;
  assign x__h24420 =
	     x__h24422 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d260 ;
  assign x__h24422 = x__h24424 ^ rg_state_3 ;
  assign x__h24424 = x__h24426 ^ rg_state_4 ;
  assign x__h24426 = x__h24428 ^ y__h24429 ;
  assign x__h24428 = rg_state_4 & rg_state_0 ;
  assign x__h24534 = x__h24536 ^ y__h24537 ;
  assign x__h24536 = x__h24538 ^ rg_state_3 ;
  assign x__h24538 = x__h24540 ^ rg_state_4 ;
  assign x__h24540 = rg_state_4 & rg_state_1 ;
  assign x__h24754 =
	     rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d266 ^
	     y__h24757 ;
  assign x__h24995 =
	     rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d275 ^
	     y__h24998 ;
  assign x__h25236 =
	     INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d278 ^
	     y__h25239 ;
  assign x__h25477 =
	     rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d281 ^
	     y__h25480 ;
  assign x__h25718 = x__h25720 ^ y__h25721 ;
  assign x__h25720 = x__h24534 ^ rg_state_1 ;
  assign x__h26558 = counter + 4'd1 ;
  assign x__h4174 =
	     x__h4176 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4176 = x__h4178 ^ y__h4179 ;
  assign x__h4178 =
	     x__h4180 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4180 = x__h4182 ^ y__h4183 ;
  assign x__h4182 =
	     x__h4184 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4184 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4301 =
	     x__h4303 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4303 = x__h4305 ^ y__h4306 ;
  assign x__h4305 =
	     x__h4307 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4307 = x__h4309 ^ y__h4310 ;
  assign x__h4309 =
	     x__h4311 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4311 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ^
	     y__h4314 ;
  assign x__h4441 =
	     x__h4443 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4443 =
	     x__h4445 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h4445 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4515 =
	     x__h4517 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4517 =
	     x__h4519 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4519 =
	     x__h4521 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4521 =
	     x__h4523 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h4523 = x__h4525 ^ y__h4526 ;
  assign x__h4525 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign x__h4631 = x__h4633 ^ y__h4179 ;
  assign x__h4633 =
	     x__h4635 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4635 =
	     x__h4184 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h4851 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37 ^
	     y__h4854 ;
  assign x__h5092 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61 ^
	     y__h5095 ;
  assign x__h5333 =
	     INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76 ^
	     y__h5336 ;
  assign x__h5574 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94 ^
	     y__h5577 ;
  assign x__h5815 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108 ^
	     y__h5818 ;
  assign x__h7099 = rg_interface_2[127:64] ^ rg_state_0 ;
  assign y__h18975 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 &
	     rg_state_1 ;
  assign y__h19098 =
	     rg_state_1 &
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 ;
  assign y__h19106 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 &
	     rg_state_3 ;
  assign y__h19644 =
	     { rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143[27:0],
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143[63:28] } ;
  assign y__h19646 =
	     { rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143[18:0],
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143[63:19] } ;
  assign y__h19885 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165[38:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165[63:39] } ;
  assign y__h19887 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165[60:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165[63:61] } ;
  assign y__h20126 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181[5:0],
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181[63:6] } ;
  assign y__h20128 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181[0],
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181[63:1] } ;
  assign y__h20367 =
	     { rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198[16:0],
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198[63:17] } ;
  assign y__h20369 =
	     { rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198[9:0],
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198[63:10] } ;
  assign y__h24086 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d260 &
	     rg_state_1 ;
  assign y__h24209 =
	     rg_state_1 &
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d260 ;
  assign y__h24213 = rg_state_3 & rg_state_1 ;
  assign y__h24217 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d260 &
	     rg_state_3 ;
  assign y__h24429 = rg_state_3 & rg_state_0 ;
  assign y__h24537 = rg_state_1 & rg_state_0 ;
  assign y__h24755 =
	     { rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d266[27:0],
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d266[63:28] } ;
  assign y__h24757 =
	     { rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d266[18:0],
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d266[63:19] } ;
  assign y__h24996 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d275[38:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d275[63:39] } ;
  assign y__h24998 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d275[60:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d275[63:61] } ;
  assign y__h25237 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d278[5:0],
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d278[63:6] } ;
  assign y__h25239 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d278[0],
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d278[63:1] } ;
  assign y__h25478 =
	     { rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d281[16:0],
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d281[63:17] } ;
  assign y__h25480 =
	     { rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d281[9:0],
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d281[63:10] } ;
  assign y__h25719 = { x__h25720[40:0], x__h25720[63:41] } ;
  assign y__h25721 = { x__h25720[6:0], x__h25720[63:7] } ;
  assign y__h4179 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign y__h4183 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign y__h4306 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign y__h4310 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign y__h4314 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 &
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign y__h4526 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign y__h4852 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[27:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[63:28] } ;
  assign y__h4854 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[18:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[63:19] } ;
  assign y__h5093 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61[38:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61[63:39] } ;
  assign y__h5095 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61[60:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61[63:61] } ;
  assign y__h5334 =
	     { INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76[5:0],
	       INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76[63:6] } ;
  assign y__h5336 =
	     { INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76[0],
	       INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76[63:1] } ;
  assign y__h5575 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94[16:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94[63:17] } ;
  assign y__h5577 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94[9:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94[63:10] } ;
  assign y__h5816 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108[40:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108[63:41] } ;
  assign y__h5818 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108[6:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108[63:7] } ;
  always@(x__h23227)
  begin
    case (x__h23227)
      4'd0: y__h23211 = 64'd75;
      4'd1: y__h23211 = 64'd90;
      4'd2: y__h23211 = 64'd105;
      4'd3: y__h23211 = 64'd120;
      4'd4: y__h23211 = 64'd135;
      4'd5: y__h23211 = 64'd150;
      4'd6: y__h23211 = 64'd165;
      4'd7: y__h23211 = 64'd180;
      4'd8: y__h23211 = 64'd195;
      4'd9: y__h23211 = 64'd210;
      4'd10: y__h23211 = 64'd225;
      4'd11: y__h23211 = 64'd240;
      default: y__h23211 = 64'b0 /* unspecified value */ ;
    endcase
  end
  always@(x__h18116)
  begin
    case (x__h18116)
      4'd0: y__h18100 = 64'd75;
      4'd1: y__h18100 = 64'd90;
      4'd2: y__h18100 = 64'd105;
      4'd3: y__h18100 = 64'd120;
      4'd4: y__h18100 = 64'd135;
      4'd5: y__h18100 = 64'd150;
      4'd6: y__h18100 = 64'd165;
      4'd7: y__h18100 = 64'd180;
      4'd8: y__h18100 = 64'd195;
      4'd9: y__h18100 = 64'd210;
      4'd10: y__h18100 = 64'd225;
      4'd11: y__h18100 = 64'd240;
      default: y__h18100 = 64'b0 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 4'd0;
	fsm_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	iv_constant <= `BSV_ASSIGNMENT_DELAY 64'h80800C0800000000;
	ready_ciphertext <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ready_tag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	req_associated_data <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_encrypted_data_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encrypted_data_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encryption_tag_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encryption_tag_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_interface_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_state_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (counter_EN) counter <= `BSV_ASSIGNMENT_DELAY counter_D_IN;
	if (fsm_state_EN) fsm_state <= `BSV_ASSIGNMENT_DELAY fsm_state_D_IN;
	if (iv_constant_EN)
	  iv_constant <= `BSV_ASSIGNMENT_DELAY iv_constant_D_IN;
	if (ready_ciphertext_EN)
	  ready_ciphertext <= `BSV_ASSIGNMENT_DELAY ready_ciphertext_D_IN;
	if (ready_tag_EN) ready_tag <= `BSV_ASSIGNMENT_DELAY ready_tag_D_IN;
	if (req_associated_data_EN)
	  req_associated_data <= `BSV_ASSIGNMENT_DELAY
	      req_associated_data_D_IN;
	if (rg_encrypted_data_0_EN)
	  rg_encrypted_data_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_encrypted_data_0_D_IN;
	if (rg_encrypted_data_1_EN)
	  rg_encrypted_data_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_encrypted_data_1_D_IN;
	if (rg_encryption_tag_0_EN)
	  rg_encryption_tag_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_encryption_tag_0_D_IN;
	if (rg_encryption_tag_1_EN)
	  rg_encryption_tag_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_encryption_tag_1_D_IN;
	if (rg_interface_0_EN)
	  rg_interface_0 <= `BSV_ASSIGNMENT_DELAY rg_interface_0_D_IN;
	if (rg_interface_1_EN)
	  rg_interface_1 <= `BSV_ASSIGNMENT_DELAY rg_interface_1_D_IN;
	if (rg_interface_2_EN)
	  rg_interface_2 <= `BSV_ASSIGNMENT_DELAY rg_interface_2_D_IN;
	if (rg_interface_3_EN)
	  rg_interface_3 <= `BSV_ASSIGNMENT_DELAY rg_interface_3_D_IN;
	if (rg_state_0_EN)
	  rg_state_0 <= `BSV_ASSIGNMENT_DELAY rg_state_0_D_IN;
	if (rg_state_1_EN)
	  rg_state_1 <= `BSV_ASSIGNMENT_DELAY rg_state_1_D_IN;
	if (rg_state_2_EN)
	  rg_state_2 <= `BSV_ASSIGNMENT_DELAY rg_state_2_D_IN;
	if (rg_state_3_EN)
	  rg_state_3 <= `BSV_ASSIGNMENT_DELAY rg_state_3_D_IN;
	if (rg_state_4_EN)
	  rg_state_4 <= `BSV_ASSIGNMENT_DELAY rg_state_4_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter = 4'hA;
    fsm_state = 3'h2;
    iv_constant = 64'hAAAAAAAAAAAAAAAA;
    ready_ciphertext = 1'h0;
    ready_tag = 1'h0;
    req_associated_data = 1'h0;
    rg_encrypted_data_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_encrypted_data_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_encryption_tag_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_encryption_tag_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_interface_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_2 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_3 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_4 = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
  
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4 &&
	  counter != 4'd0)
	$display("local_state=%h,%h,%h,%h,%h",
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61,
		 INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69,
		 INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4)
	$display("new_rg_state %h %h",
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[319:256],
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[255:192]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198,
		 x__h25720);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198,
		 x__h25720);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_encryption_state && counter == 4'd0)
	$display("rg_encrypted_data=%h%h",
		 rg_encrypted_data_0,
		 rg_encrypted_data_1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_encryption_state && counter == 4'd0)
	$display("encryption_result=%h%h",
		 encryption0__h16082,
		 encryption1__h16083);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypted_data_state && counter == 4'd8)
	$display("processed_data1%h",
		 320'h80000000000000000000000000000000000000000000000000000000000000000000000000000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypted_data_state && counter == 4'd8)
	$display("packed_pre_finalized_data%h",
		 packed_pre_finalized_data__h21335);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypted_data_state && counter == 4'd8)
	$display("lv_updated_finalized_data%h",
		 lv_updated_finalized_data__h22007);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypted_data_state && counter == 4'd8)
	$display("lv_finalized_key%h", lv_finalized_key__h22041);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypted_data_state && counter != 4'd8)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypted_data_state && counter != 4'd8)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypted_data_state && counter != 4'd8)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198,
		 x__h25720);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypted_data_state && counter != 4'd8)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d260,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d266,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d275,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d278,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d281,
		 x__h25720);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 x__h24754 ^ y__h24755,
		 x__h24995 ^ y__h24996,
		 x__h25236 ^ y__h25237,
		 x__h25477 ^ y__h25478,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4)
	$display("encryption_tag0%h", encryption_tag0__h26646);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4)
	$display("encryption_tag1%h", encryption_tag1__h26647);
  end
  // synopsys translate_on
endmodule  // mkAscon_engine

