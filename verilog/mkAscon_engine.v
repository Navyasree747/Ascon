//
// Generated by Bluespec Compiler, version untagged-g2930c314 (build 2930c314)
//
// On Wed Dec  4 23:00:24 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_input_function             O     1 const
// ciphertext                     O   128 reg
// RDY_ciphertext                 O     1 reg
// decrypted_data                 O   128 reg
// RDY_decrypted_data             O     1 reg
// tag                            O   128 reg
// RDY_tag                        O     1 reg
// decrypted_tag                  O   128 reg
// RDY_decrypted_tag              O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// input_function_plaintext       I   128 reg
// input_function_associated_data  I   128 reg
// input_function_key             I   128 reg
// input_function_nonce           I   128 reg
// input_function_mode            I     1 reg
// EN_input_function              I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAscon_engine(CLK,
		      RST_N,

		      input_function_plaintext,
		      input_function_associated_data,
		      input_function_key,
		      input_function_nonce,
		      input_function_mode,
		      EN_input_function,
		      RDY_input_function,

		      ciphertext,
		      RDY_ciphertext,

		      decrypted_data,
		      RDY_decrypted_data,

		      tag,
		      RDY_tag,

		      decrypted_tag,
		      RDY_decrypted_tag);
  input  CLK;
  input  RST_N;

  // action method input_function
  input  [127 : 0] input_function_plaintext;
  input  [127 : 0] input_function_associated_data;
  input  [127 : 0] input_function_key;
  input  [127 : 0] input_function_nonce;
  input  input_function_mode;
  input  EN_input_function;
  output RDY_input_function;

  // value method ciphertext
  output [127 : 0] ciphertext;
  output RDY_ciphertext;

  // value method decrypted_data
  output [127 : 0] decrypted_data;
  output RDY_decrypted_data;

  // value method tag
  output [127 : 0] tag;
  output RDY_tag;

  // value method decrypted_tag
  output [127 : 0] decrypted_tag;
  output RDY_decrypted_tag;

  // signals for module outputs
  wire [127 : 0] ciphertext, decrypted_data, decrypted_tag, tag;
  wire RDY_ciphertext,
       RDY_decrypted_data,
       RDY_decrypted_tag,
       RDY_input_function,
       RDY_tag;

  // register counter
  reg [3 : 0] counter;
  reg [3 : 0] counter_D_IN;
  wire counter_EN;

  // register fsm_state
  reg [2 : 0] fsm_state;
  reg [2 : 0] fsm_state_D_IN;
  wire fsm_state_EN;

  // register iv_constant
  reg [63 : 0] iv_constant;
  wire [63 : 0] iv_constant_D_IN;
  wire iv_constant_EN;

  // register ready_ciphertext
  reg ready_ciphertext;
  wire ready_ciphertext_D_IN, ready_ciphertext_EN;

  // register ready_decrypted_data
  reg ready_decrypted_data;
  wire ready_decrypted_data_D_IN, ready_decrypted_data_EN;

  // register ready_decrypted_tag
  reg ready_decrypted_tag;
  wire ready_decrypted_tag_D_IN, ready_decrypted_tag_EN;

  // register ready_tag
  reg ready_tag;
  wire ready_tag_D_IN, ready_tag_EN;

  // register req_associated_data
  reg req_associated_data;
  wire req_associated_data_D_IN, req_associated_data_EN;

  // register rg_decrypted_data_0
  reg [63 : 0] rg_decrypted_data_0;
  wire [63 : 0] rg_decrypted_data_0_D_IN;
  wire rg_decrypted_data_0_EN;

  // register rg_decrypted_data_1
  reg [63 : 0] rg_decrypted_data_1;
  wire [63 : 0] rg_decrypted_data_1_D_IN;
  wire rg_decrypted_data_1_EN;

  // register rg_decryption_tag_0
  reg [63 : 0] rg_decryption_tag_0;
  wire [63 : 0] rg_decryption_tag_0_D_IN;
  wire rg_decryption_tag_0_EN;

  // register rg_decryption_tag_1
  reg [63 : 0] rg_decryption_tag_1;
  wire [63 : 0] rg_decryption_tag_1_D_IN;
  wire rg_decryption_tag_1_EN;

  // register rg_encrypted_data_0
  reg [63 : 0] rg_encrypted_data_0;
  wire [63 : 0] rg_encrypted_data_0_D_IN;
  wire rg_encrypted_data_0_EN;

  // register rg_encrypted_data_1
  reg [63 : 0] rg_encrypted_data_1;
  wire [63 : 0] rg_encrypted_data_1_D_IN;
  wire rg_encrypted_data_1_EN;

  // register rg_encryption_tag_0
  reg [63 : 0] rg_encryption_tag_0;
  wire [63 : 0] rg_encryption_tag_0_D_IN;
  wire rg_encryption_tag_0_EN;

  // register rg_encryption_tag_1
  reg [63 : 0] rg_encryption_tag_1;
  wire [63 : 0] rg_encryption_tag_1_D_IN;
  wire rg_encryption_tag_1_EN;

  // register rg_interface_0
  reg [127 : 0] rg_interface_0;
  wire [127 : 0] rg_interface_0_D_IN;
  wire rg_interface_0_EN;

  // register rg_interface_1
  reg [127 : 0] rg_interface_1;
  wire [127 : 0] rg_interface_1_D_IN;
  wire rg_interface_1_EN;

  // register rg_interface_2
  reg [127 : 0] rg_interface_2;
  wire [127 : 0] rg_interface_2_D_IN;
  wire rg_interface_2_EN;

  // register rg_interface_3
  reg [127 : 0] rg_interface_3;
  wire [127 : 0] rg_interface_3_D_IN;
  wire rg_interface_3_EN;

  // register rg_state_0
  reg [63 : 0] rg_state_0;
  reg [63 : 0] rg_state_0_D_IN;
  wire rg_state_0_EN;

  // register rg_state_1
  reg [63 : 0] rg_state_1;
  reg [63 : 0] rg_state_1_D_IN;
  wire rg_state_1_EN;

  // register rg_state_2
  reg [63 : 0] rg_state_2;
  reg [63 : 0] rg_state_2_D_IN;
  wire rg_state_2_EN;

  // register rg_state_3
  reg [63 : 0] rg_state_3;
  reg [63 : 0] rg_state_3_D_IN;
  wire rg_state_3_EN;

  // register rg_state_4
  reg [63 : 0] rg_state_4;
  reg [63 : 0] rg_state_4_D_IN;
  wire rg_state_4_EN;

  // register select
  reg select;
  wire select_D_IN, select_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_associated_data_state,
       CAN_FIRE_RL_decryption_state,
       CAN_FIRE_RL_encryption_state,
       CAN_FIRE_RL_finalization_state,
       CAN_FIRE_RL_intialization_state,
       CAN_FIRE_RL_permutate_encrypt_decrypt_state,
       CAN_FIRE_RL_selection_state,
       CAN_FIRE_input_function,
       WILL_FIRE_RL_associated_data_state,
       WILL_FIRE_RL_decryption_state,
       WILL_FIRE_RL_encryption_state,
       WILL_FIRE_RL_finalization_state,
       WILL_FIRE_RL_intialization_state,
       WILL_FIRE_RL_permutate_encrypt_decrypt_state,
       WILL_FIRE_RL_selection_state,
       WILL_FIRE_input_function;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_rg_state_0_write_1__VAL_1,
		MUX_rg_state_0_write_1__VAL_2,
		MUX_rg_state_0_write_1__VAL_3,
		MUX_rg_state_0_write_1__VAL_4,
		MUX_rg_state_0_write_1__VAL_5,
		MUX_rg_state_0_write_1__VAL_6,
		MUX_rg_state_1_write_1__VAL_1,
		MUX_rg_state_1_write_1__VAL_2,
		MUX_rg_state_1_write_1__VAL_3,
		MUX_rg_state_1_write_1__VAL_4,
		MUX_rg_state_1_write_1__VAL_5,
		MUX_rg_state_1_write_1__VAL_6,
		MUX_rg_state_2_write_1__VAL_1,
		MUX_rg_state_2_write_1__VAL_4,
		MUX_rg_state_2_write_1__VAL_5,
		MUX_rg_state_3_write_1__VAL_1,
		MUX_rg_state_3_write_1__VAL_4,
		MUX_rg_state_3_write_1__VAL_5,
		MUX_rg_state_4_write_1__VAL_3,
		MUX_rg_state_4_write_1__VAL_4,
		MUX_rg_state_4_write_1__VAL_5;
  wire [3 : 0] MUX_counter_write_1__VAL_2,
	       MUX_counter_write_1__VAL_4,
	       MUX_counter_write_1__VAL_5;
  wire [2 : 0] MUX_fsm_state_write_1__VAL_6;
  wire MUX_counter_write_1__SEL_1,
       MUX_counter_write_1__SEL_2,
       MUX_fsm_state_write_1__SEL_2,
       MUX_fsm_state_write_1__SEL_3,
       MUX_fsm_state_write_1__SEL_4,
       MUX_fsm_state_write_1__SEL_5,
       MUX_fsm_state_write_1__SEL_7,
       MUX_fsm_state_write_1__SEL_8,
       MUX_rg_state_0_write_1__SEL_2,
       MUX_rg_state_2_write_1__PSEL_3,
       MUX_rg_state_2_write_1__SEL_2,
       MUX_rg_state_2_write_1__SEL_3,
       MUX_rg_state_3_write_1__SEL_3,
       MUX_rg_state_4_write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] y__h16006, y__h21069;
  wire [319 : 0] _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_43_XOR__ETC___d250,
		 lv_finalized_key__h19881,
		 lv_updated_finalized_data__h19847,
		 packed_pre_finalized_data__h19175,
		 padded_key__h1678,
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49;
  wire [63 : 0] IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69,
		INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84,
		INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191,
		din__h24457,
		encryption0__h12019,
		encryption1__h12020,
		encryption_tag0__h24584,
		encryption_tag1__h24585,
		rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137,
		rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d262,
		rg_state_4_0_AND_rg_state_0_2_92_XOR_rg_state__ETC___d207,
		rg_state_4_0_AND_rg_state_1_4_33_XOR_rg_state__ETC___d152,
		rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		x__h11086,
		x__h16967,
		x__h16969,
		x__h16991,
		x__h16993,
		x__h16995,
		x__h16997,
		x__h17327,
		x__h17329,
		x__h17351,
		x__h17353,
		x__h17355,
		x__h17357,
		x__h17359,
		x__h17361,
		x__h17698,
		x__h17700,
		x__h17724,
		x__h18007,
		x__h18009,
		x__h18031,
		x__h18033,
		x__h22030,
		x__h22032,
		x__h22054,
		x__h22056,
		x__h22058,
		x__h22060,
		x__h22062,
		x__h22390,
		x__h22392,
		x__h22414,
		x__h22416,
		x__h22418,
		x__h22420,
		x__h22422,
		x__h22424,
		x__h22761,
		x__h22763,
		x__h22787,
		x__h22789,
		x__h22791,
		x__h23070,
		x__h23072,
		x__h23094,
		x__h23096,
		x__h23098,
		x__h23100,
		x__h23102,
		x__h23104,
		x__h23419,
		x__h23421,
		x__h23443,
		x__h23445,
		x__h23447,
		x__h23449,
		x__h4785,
		x__h4787,
		x__h4809,
		x__h4811,
		x__h4813,
		x__h4815,
		x__h4817,
		x__h4819,
		x__h5145,
		x__h5147,
		x__h5169,
		x__h5171,
		x__h5173,
		x__h5175,
		x__h5177,
		x__h5179,
		x__h5516,
		x__h5518,
		x__h5542,
		x__h5544,
		x__h5546,
		x__h5825,
		x__h5827,
		x__h5849,
		x__h5851,
		x__h5853,
		x__h5855,
		x__h5857,
		x__h5859,
		x__h6174,
		x__h6176,
		x__h6198,
		x__h6200,
		x__h6202,
		x__h7977,
		y__h16968,
		y__h16970,
		y__h17000,
		y__h17328,
		y__h17330,
		y__h17356,
		y__h17364,
		y__h17699,
		y__h17701,
		y__h18008,
		y__h18010,
		y__h22031,
		y__h22033,
		y__h22063,
		y__h22391,
		y__h22393,
		y__h22419,
		y__h22423,
		y__h22427,
		y__h22762,
		y__h22764,
		y__h23071,
		y__h23073,
		y__h23105,
		y__h23420,
		y__h23422,
		y__h23446,
		y__h4786,
		y__h4788,
		y__h4814,
		y__h4818,
		y__h5146,
		y__h5148,
		y__h5174,
		y__h5178,
		y__h5182,
		y__h5517,
		y__h5519,
		y__h5826,
		y__h5828,
		y__h5860,
		y__h6175,
		y__h6177;
  wire [3 : 0] x__h16022, x__h21085, x__h24496;
  wire counter_ULT_12___d4;

  // action method input_function
  assign RDY_input_function = 1'd1 ;
  assign CAN_FIRE_input_function = 1'd1 ;
  assign WILL_FIRE_input_function = EN_input_function ;

  // value method ciphertext
  assign ciphertext = { rg_encrypted_data_1, rg_encrypted_data_0 } ;
  assign RDY_ciphertext = ready_ciphertext ;

  // value method decrypted_data
  assign decrypted_data = { rg_decrypted_data_1, rg_decrypted_data_0 } ;
  assign RDY_decrypted_data = ready_decrypted_data ;

  // value method tag
  assign tag = { rg_encryption_tag_1, rg_encryption_tag_0 } ;
  assign RDY_tag = ready_tag ;

  // value method decrypted_tag
  assign decrypted_tag = { rg_decryption_tag_1, rg_decryption_tag_0 } ;
  assign RDY_decrypted_tag = ready_decrypted_tag ;

  // rule RL_intialization_state
  assign CAN_FIRE_RL_intialization_state = fsm_state == 3'd1 ;
  assign WILL_FIRE_RL_intialization_state = CAN_FIRE_RL_intialization_state ;

  // rule RL_associated_data_state
  assign CAN_FIRE_RL_associated_data_state = fsm_state == 3'd2 ;
  assign WILL_FIRE_RL_associated_data_state =
	     CAN_FIRE_RL_associated_data_state ;

  // rule RL_selection_state
  assign CAN_FIRE_RL_selection_state = fsm_state == 3'd3 ;
  assign WILL_FIRE_RL_selection_state = CAN_FIRE_RL_selection_state ;

  // rule RL_encryption_state
  assign CAN_FIRE_RL_encryption_state = fsm_state == 3'd4 ;
  assign WILL_FIRE_RL_encryption_state = CAN_FIRE_RL_encryption_state ;

  // rule RL_decryption_state
  assign CAN_FIRE_RL_decryption_state = fsm_state == 3'd5 ;
  assign WILL_FIRE_RL_decryption_state = CAN_FIRE_RL_decryption_state ;

  // rule RL_permutate_encrypt_decrypt_state
  assign CAN_FIRE_RL_permutate_encrypt_decrypt_state = fsm_state == 3'd6 ;
  assign WILL_FIRE_RL_permutate_encrypt_decrypt_state =
	     CAN_FIRE_RL_permutate_encrypt_decrypt_state ;

  // rule RL_finalization_state
  assign CAN_FIRE_RL_finalization_state = fsm_state == 3'd7 ;
  assign WILL_FIRE_RL_finalization_state = CAN_FIRE_RL_finalization_state ;

  // inputs to muxes for submodule ports
  assign MUX_counter_write_1__SEL_1 =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ;
  assign MUX_counter_write_1__SEL_2 =
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ;
  assign MUX_fsm_state_write_1__SEL_2 =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 ;
  assign MUX_fsm_state_write_1__SEL_3 =
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter == 4'd8 ;
  assign MUX_fsm_state_write_1__SEL_4 =
	     WILL_FIRE_RL_decryption_state && counter != 4'd0 ;
  assign MUX_fsm_state_write_1__SEL_5 =
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ;
  assign MUX_fsm_state_write_1__SEL_7 =
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter == 4'd8 ;
  assign MUX_fsm_state_write_1__SEL_8 =
	     WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4 ;
  assign MUX_rg_state_0_write_1__SEL_2 =
	     WILL_FIRE_RL_associated_data_state &&
	     (req_associated_data || counter != 4'd8) ;
  assign MUX_rg_state_2_write_1__SEL_2 =
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter != 4'd8 ;
  assign MUX_rg_state_2_write_1__PSEL_3 =
	     WILL_FIRE_RL_decryption_state || WILL_FIRE_RL_encryption_state ;
  assign MUX_rg_state_2_write_1__SEL_3 =
	     MUX_rg_state_2_write_1__PSEL_3 && counter != 4'd0 ;
  assign MUX_rg_state_3_write_1__SEL_3 =
	     MUX_rg_state_2_write_1__PSEL_3 && counter != 4'd0 ;
  assign MUX_rg_state_4_write_1__SEL_3 =
	     MUX_rg_state_2_write_1__PSEL_3 && counter != 4'd0 ;
  assign MUX_counter_write_1__VAL_2 = (counter == 4'd8) ? 4'd0 : x__h24496 ;
  assign MUX_counter_write_1__VAL_4 = (counter == 4'd0) ? x__h24496 : 4'd0 ;
  assign MUX_counter_write_1__VAL_5 = counter_ULT_12___d4 ? x__h24496 : 4'd0 ;
  assign MUX_fsm_state_write_1__VAL_6 = select ? 3'd4 : 3'd5 ;
  assign MUX_rg_state_0_write_1__VAL_1 = x__h22030 ^ y__h22031 ;
  assign MUX_rg_state_0_write_1__VAL_2 =
	     req_associated_data ?
	       x__h7977 :
	       rg_state_4_0_AND_rg_state_1_4_33_XOR_rg_state__ETC___d152 ;
  assign MUX_rg_state_0_write_1__VAL_3 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[319:256] ;
  assign MUX_rg_state_0_write_1__VAL_4 =
	     (counter == 4'd0) ? encryption0__h12019 : rg_state_0 ;
  assign MUX_rg_state_0_write_1__VAL_5 =
	     (counter == 4'd0) ? rg_interface_1[127:64] : rg_state_0 ;
  assign MUX_rg_state_0_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_43_XOR__ETC___d250[319:256] :
	       rg_state_4_0_AND_rg_state_1_4_33_XOR_rg_state__ETC___d152 ;
  assign MUX_rg_state_1_write_1__VAL_1 = x__h22390 ^ y__h22391 ;
  assign MUX_rg_state_1_write_1__VAL_2 =
	     req_associated_data ?
	       x__h11086 :
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173 ;
  assign MUX_rg_state_1_write_1__VAL_3 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[255:192] ;
  assign MUX_rg_state_1_write_1__VAL_4 =
	     (counter == 4'd0) ? encryption1__h12020 : rg_state_1 ;
  assign MUX_rg_state_1_write_1__VAL_5 =
	     (counter == 4'd0) ? rg_interface_1[63:0] : rg_state_1 ;
  assign MUX_rg_state_1_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_43_XOR__ETC___d250[255:192] :
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173 ;
  assign MUX_rg_state_2_write_1__VAL_1 = x__h22761 ^ y__h22762 ;
  assign MUX_rg_state_2_write_1__VAL_4 =
	     counter_ULT_12___d4 ?
	       INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[191:128] ;
  assign MUX_rg_state_2_write_1__VAL_5 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_43_XOR__ETC___d250[191:128] :
	       INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191 ;
  assign MUX_rg_state_3_write_1__VAL_1 = x__h23070 ^ y__h23071 ;
  assign MUX_rg_state_3_write_1__VAL_4 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[127:64] ;
  assign MUX_rg_state_3_write_1__VAL_5 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_43_XOR__ETC___d250[127:64] :
	       rg_state_4_0_AND_rg_state_0_2_92_XOR_rg_state__ETC___d207 ;
  assign MUX_rg_state_4_write_1__VAL_3 =
	     { rg_state_4[63:1], ~rg_state_4[0] } ;
  assign MUX_rg_state_4_write_1__VAL_4 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[63:0] ;
  assign MUX_rg_state_4_write_1__VAL_5 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_43_XOR__ETC___d250[63:0] :
	       din__h24457 ;

  // register counter
  always@(MUX_counter_write_1__SEL_1 or
	  x__h24496 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_counter_write_1__VAL_2 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_2_write_1__PSEL_3 or
	  MUX_counter_write_1__VAL_4 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_counter_write_1__VAL_5 or WILL_FIRE_RL_selection_state)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1: counter_D_IN = x__h24496;
      MUX_counter_write_1__SEL_2: counter_D_IN = MUX_counter_write_1__VAL_2;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  counter_D_IN = MUX_counter_write_1__VAL_2;
      MUX_rg_state_2_write_1__PSEL_3:
	  counter_D_IN = MUX_counter_write_1__VAL_4;
      WILL_FIRE_RL_intialization_state:
	  counter_D_IN = MUX_counter_write_1__VAL_5;
      WILL_FIRE_RL_selection_state: counter_D_IN = 4'd0;
      default: counter_D_IN = 4'b0 /* unspecified value */ ;
    endcase
  end
  assign counter_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ||
	     WILL_FIRE_RL_decryption_state ||
	     WILL_FIRE_RL_encryption_state ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_selection_state ;

  // register fsm_state
  always@(EN_input_function or
	  MUX_fsm_state_write_1__SEL_2 or
	  MUX_fsm_state_write_1__SEL_3 or
	  MUX_fsm_state_write_1__SEL_4 or
	  MUX_fsm_state_write_1__SEL_5 or
	  WILL_FIRE_RL_selection_state or
	  MUX_fsm_state_write_1__VAL_6 or
	  MUX_fsm_state_write_1__SEL_7 or MUX_fsm_state_write_1__SEL_8)
  case (1'b1)
    EN_input_function: fsm_state_D_IN = 3'd1;
    MUX_fsm_state_write_1__SEL_2: fsm_state_D_IN = 3'd0;
    MUX_fsm_state_write_1__SEL_3: fsm_state_D_IN = 3'd7;
    MUX_fsm_state_write_1__SEL_4 || MUX_fsm_state_write_1__SEL_5:
	fsm_state_D_IN = 3'd6;
    WILL_FIRE_RL_selection_state:
	fsm_state_D_IN = MUX_fsm_state_write_1__VAL_6;
    MUX_fsm_state_write_1__SEL_7: fsm_state_D_IN = 3'd3;
    MUX_fsm_state_write_1__SEL_8: fsm_state_D_IN = 3'd2;
    default: fsm_state_D_IN = 3'b0 /* unspecified value */ ;
  endcase
  assign fsm_state_EN =
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state &&
	     counter == 4'd8 ||
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 ||
	     WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter == 4'd8 ||
	     (WILL_FIRE_RL_decryption_state ||
	      WILL_FIRE_RL_encryption_state) &&
	     counter != 4'd0 ||
	     WILL_FIRE_RL_selection_state ||
	     EN_input_function ;

  // register iv_constant
  assign iv_constant_D_IN = 64'h0 ;
  assign iv_constant_EN = 1'b0 ;

  // register ready_ciphertext
  assign ready_ciphertext_D_IN = 1'd1 ;
  assign ready_ciphertext_EN = MUX_fsm_state_write_1__SEL_5 ;

  // register ready_decrypted_data
  assign ready_decrypted_data_D_IN = 1'd1 ;
  assign ready_decrypted_data_EN = MUX_fsm_state_write_1__SEL_4 ;

  // register ready_decrypted_tag
  assign ready_decrypted_tag_D_IN = 1'd1 ;
  assign ready_decrypted_tag_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     !select ;

  // register ready_tag
  assign ready_tag_D_IN = 1'd1 ;
  assign ready_tag_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     select ;

  // register req_associated_data
  assign req_associated_data_D_IN = 1'd0 ;
  assign req_associated_data_EN =
	     WILL_FIRE_RL_associated_data_state && req_associated_data ;

  // register rg_decrypted_data_0
  assign rg_decrypted_data_0_D_IN = encryption1__h12020 ;
  assign rg_decrypted_data_0_EN =
	     WILL_FIRE_RL_decryption_state && counter == 4'd0 ;

  // register rg_decrypted_data_1
  assign rg_decrypted_data_1_D_IN = encryption0__h12019 ;
  assign rg_decrypted_data_1_EN =
	     WILL_FIRE_RL_decryption_state && counter == 4'd0 ;

  // register rg_decryption_tag_0
  assign rg_decryption_tag_0_D_IN = encryption_tag1__h24585 ;
  assign rg_decryption_tag_0_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     !select ;

  // register rg_decryption_tag_1
  assign rg_decryption_tag_1_D_IN = encryption_tag0__h24584 ;
  assign rg_decryption_tag_1_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     !select ;

  // register rg_encrypted_data_0
  assign rg_encrypted_data_0_D_IN = rg_state_1 ;
  assign rg_encrypted_data_0_EN = MUX_fsm_state_write_1__SEL_5 ;

  // register rg_encrypted_data_1
  assign rg_encrypted_data_1_D_IN = rg_state_0 ;
  assign rg_encrypted_data_1_EN = MUX_fsm_state_write_1__SEL_5 ;

  // register rg_encryption_tag_0
  assign rg_encryption_tag_0_D_IN = encryption_tag1__h24585 ;
  assign rg_encryption_tag_0_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     select ;

  // register rg_encryption_tag_1
  assign rg_encryption_tag_1_D_IN = encryption_tag0__h24584 ;
  assign rg_encryption_tag_1_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     select ;

  // register rg_interface_0
  assign rg_interface_0_D_IN = input_function_key ;
  assign rg_interface_0_EN = EN_input_function ;

  // register rg_interface_1
  assign rg_interface_1_D_IN = input_function_plaintext ;
  assign rg_interface_1_EN = EN_input_function ;

  // register rg_interface_2
  assign rg_interface_2_D_IN = input_function_associated_data ;
  assign rg_interface_2_EN = EN_input_function ;

  // register rg_interface_3
  assign rg_interface_3_D_IN = input_function_nonce ;
  assign rg_interface_3_EN = EN_input_function ;

  // register rg_state_0
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_0_write_1__VAL_1 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  MUX_rg_state_0_write_1__VAL_2 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_0_write_1__VAL_3 or
	  WILL_FIRE_RL_encryption_state or
	  MUX_rg_state_0_write_1__VAL_4 or
	  WILL_FIRE_RL_decryption_state or
	  MUX_rg_state_0_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_0_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_1;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_2;
      WILL_FIRE_RL_intialization_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_3;
      WILL_FIRE_RL_encryption_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_4;
      WILL_FIRE_RL_decryption_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_6;
      default: rg_state_0_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_0_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state &&
	     (req_associated_data || counter != 4'd8) ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_encryption_state ||
	     WILL_FIRE_RL_decryption_state ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ;

  // register rg_state_1
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_1_write_1__VAL_1 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  MUX_rg_state_1_write_1__VAL_2 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_1_write_1__VAL_3 or
	  WILL_FIRE_RL_encryption_state or
	  MUX_rg_state_1_write_1__VAL_4 or
	  WILL_FIRE_RL_decryption_state or
	  MUX_rg_state_1_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_1_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_1;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_2;
      WILL_FIRE_RL_intialization_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_3;
      WILL_FIRE_RL_encryption_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_4;
      WILL_FIRE_RL_decryption_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_6;
      default: rg_state_1_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_1_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state &&
	     (req_associated_data || counter != 4'd8) ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_encryption_state ||
	     WILL_FIRE_RL_decryption_state ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ;

  // register rg_state_2
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_2_write_1__VAL_1 or
	  MUX_rg_state_2_write_1__SEL_2 or
	  INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191 or
	  MUX_rg_state_2_write_1__SEL_3 or
	  rg_state_2 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_2_write_1__VAL_4 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_2_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_1;
      MUX_rg_state_2_write_1__SEL_2:
	  rg_state_2_D_IN =
	      INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191;
      MUX_rg_state_2_write_1__SEL_3: rg_state_2_D_IN = rg_state_2;
      WILL_FIRE_RL_intialization_state:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_4;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_5;
      default: rg_state_2_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_2_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter != 4'd8 ||
	     (WILL_FIRE_RL_decryption_state ||
	      WILL_FIRE_RL_encryption_state) &&
	     counter != 4'd0 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ;

  // register rg_state_3
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_3_write_1__VAL_1 or
	  MUX_rg_state_2_write_1__SEL_2 or
	  rg_state_4_0_AND_rg_state_0_2_92_XOR_rg_state__ETC___d207 or
	  MUX_rg_state_3_write_1__SEL_3 or
	  rg_state_3 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_3_write_1__VAL_4 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_3_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_1;
      MUX_rg_state_2_write_1__SEL_2:
	  rg_state_3_D_IN =
	      rg_state_4_0_AND_rg_state_0_2_92_XOR_rg_state__ETC___d207;
      MUX_rg_state_3_write_1__SEL_3: rg_state_3_D_IN = rg_state_3;
      WILL_FIRE_RL_intialization_state:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_4;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_5;
      default: rg_state_3_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_3_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter != 4'd8 ||
	     (WILL_FIRE_RL_decryption_state ||
	      WILL_FIRE_RL_encryption_state) &&
	     counter != 4'd0 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ;

  // register rg_state_4
  always@(MUX_counter_write_1__SEL_1 or
	  din__h24457 or
	  MUX_rg_state_2_write_1__SEL_2 or
	  MUX_rg_state_4_write_1__SEL_3 or
	  MUX_rg_state_4_write_1__VAL_3 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_4_write_1__VAL_4 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_4_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1: rg_state_4_D_IN = din__h24457;
      MUX_rg_state_2_write_1__SEL_2: rg_state_4_D_IN = din__h24457;
      MUX_rg_state_4_write_1__SEL_3:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_3;
      WILL_FIRE_RL_intialization_state:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_4;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_5;
      default: rg_state_4_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_4_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter != 4'd8 ||
	     (WILL_FIRE_RL_decryption_state ||
	      WILL_FIRE_RL_encryption_state) &&
	     counter != 4'd0 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ;

  // register select
  assign select_D_IN = input_function_mode ;
  assign select_EN = EN_input_function ;

  // remaining internal signals
  assign IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 =
	     (counter == 4'd0) ? iv_constant : rg_state_0 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 =
	     (counter == 4'd0) ? rg_interface_0[127:64] : rg_state_1 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23 =
	     (counter == 4'd0) ? rg_interface_0[63:0] : rg_state_2 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23 ^
	     y__h21069 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 =
	     (counter == 4'd0) ? rg_interface_3[127:64] : rg_state_3 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102 =
	     x__h5825 ^ y__h5826 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 =
	     (counter == 4'd0) ? rg_interface_3[63:0] : rg_state_4 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116 =
	     x__h6174 ^ y__h6175 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45 =
	     x__h4785 ^ y__h4786 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69 =
	     x__h5145 ^ y__h5146 ;
  assign INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84 =
	     x__h5516 ^ y__h5517 ;
  assign INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191 =
	     x__h17698 ^ y__h17699 ;
  assign _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_43_XOR__ETC___d250 =
	     lv_finalized_key__h19881 ^ lv_updated_finalized_data__h19847 ;
  assign counter_ULT_12___d4 = counter < 4'd12 ;
  assign din__h24457 = x__h23419 ^ y__h23420 ;
  assign encryption0__h12019 = rg_interface_1[127:64] ^ rg_state_0 ;
  assign encryption1__h12020 = rg_interface_1[63:0] ^ rg_state_1 ;
  assign encryption_tag0__h24584 = rg_interface_0[127:64] ^ rg_state_3 ;
  assign encryption_tag1__h24585 = rg_interface_0[63:0] ^ rg_state_4 ;
  assign lv_finalized_key__h19881 = { 128'b0, rg_interface_0, 64'b0 } ;
  assign lv_updated_finalized_data__h19847 =
	     { ~rg_state_0[63],
	       rg_state_0[62:0],
	       rg_state_1,
	       rg_state_2,
	       rg_state_3,
	       rg_state_4 } ;
  assign packed_pre_finalized_data__h19175 =
	     { rg_state_0, rg_state_1, rg_state_2, rg_state_3, rg_state_4 } ;
  assign padded_key__h1678 = { 192'b0, rg_interface_0 } ;
  assign rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49 =
	     packed_pre_finalized_data__h19175 ^ padded_key__h1678 ;
  assign rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137 =
	     rg_state_2 ^ y__h16006 ;
  assign rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d262 =
	     rg_state_2 ^ y__h21069 ;
  assign rg_state_4_0_AND_rg_state_0_2_92_XOR_rg_state__ETC___d207 =
	     x__h18007 ^ y__h18008 ;
  assign rg_state_4_0_AND_rg_state_1_4_33_XOR_rg_state__ETC___d152 =
	     x__h16967 ^ y__h16968 ;
  assign rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173 =
	     x__h17327 ^ y__h17328 ;
  assign x__h11086 = rg_interface_2[63:0] ^ rg_state_1 ;
  assign x__h16022 = 4'd7 - counter ;
  assign x__h16967 = x__h16969 ^ y__h16970 ;
  assign x__h16969 = x__h16991 ^ rg_state_0 ;
  assign x__h16991 = x__h16993 ^ rg_state_1 ;
  assign x__h16993 = x__h16995 ^ y__h23446 ;
  assign x__h16995 =
	     x__h16997 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137 ;
  assign x__h16997 = x__h22062 ^ y__h17000 ;
  assign x__h17327 = x__h17329 ^ y__h17330 ;
  assign x__h17329 = x__h17351 ^ rg_state_0 ;
  assign x__h17351 = x__h17353 ^ rg_state_1 ;
  assign x__h17353 = x__h17355 ^ y__h17356 ;
  assign x__h17355 =
	     x__h17357 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137 ;
  assign x__h17357 = x__h17359 ^ y__h22423 ;
  assign x__h17359 = x__h17361 ^ rg_state_3 ;
  assign x__h17361 = rg_state_4 ^ y__h17364 ;
  assign x__h17698 = x__h17700 ^ y__h17701 ;
  assign x__h17700 = ~(x__h17724 ^ rg_state_1) ;
  assign x__h17724 =
	     x__h22789 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137 ;
  assign x__h18007 = x__h18009 ^ y__h18010 ;
  assign x__h18009 = x__h18031 ^ rg_state_0 ;
  assign x__h18031 = x__h18033 ^ rg_state_1 ;
  assign x__h18033 =
	     x__h23098 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137 ;
  assign x__h21085 = 4'd11 - counter ;
  assign x__h22030 = x__h22032 ^ y__h22033 ;
  assign x__h22032 = x__h22054 ^ rg_state_0 ;
  assign x__h22054 = x__h22056 ^ rg_state_1 ;
  assign x__h22056 = x__h22058 ^ y__h23446 ;
  assign x__h22058 =
	     x__h22060 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d262 ;
  assign x__h22060 = x__h22062 ^ y__h22063 ;
  assign x__h22062 = x__h23449 ^ rg_state_3 ;
  assign x__h22390 = x__h22392 ^ y__h22393 ;
  assign x__h22392 = x__h22414 ^ rg_state_0 ;
  assign x__h22414 = x__h22416 ^ rg_state_1 ;
  assign x__h22416 = x__h22418 ^ y__h22419 ;
  assign x__h22418 =
	     x__h22420 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d262 ;
  assign x__h22420 = x__h22422 ^ y__h22423 ;
  assign x__h22422 = x__h22424 ^ rg_state_3 ;
  assign x__h22424 = rg_state_4 ^ y__h22427 ;
  assign x__h22761 = x__h22763 ^ y__h22764 ;
  assign x__h22763 = ~(x__h22787 ^ rg_state_1) ;
  assign x__h22787 =
	     x__h22789 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d262 ;
  assign x__h22789 = x__h22791 ^ rg_state_4 ;
  assign x__h22791 = rg_state_4 & rg_state_3 ;
  assign x__h23070 = x__h23072 ^ y__h23073 ;
  assign x__h23072 = x__h23094 ^ rg_state_0 ;
  assign x__h23094 = x__h23096 ^ rg_state_1 ;
  assign x__h23096 =
	     x__h23098 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d262 ;
  assign x__h23098 = x__h23100 ^ rg_state_3 ;
  assign x__h23100 = x__h23102 ^ rg_state_4 ;
  assign x__h23102 = x__h23104 ^ y__h23105 ;
  assign x__h23104 = rg_state_4 & rg_state_0 ;
  assign x__h23419 = x__h23421 ^ y__h23422 ;
  assign x__h23421 = x__h23443 ^ rg_state_1 ;
  assign x__h23443 = x__h23445 ^ y__h23446 ;
  assign x__h23445 = x__h23447 ^ rg_state_3 ;
  assign x__h23447 = x__h23449 ^ rg_state_4 ;
  assign x__h23449 = rg_state_4 & rg_state_1 ;
  assign x__h24496 = counter + 4'd1 ;
  assign x__h4785 = x__h4787 ^ y__h4788 ;
  assign x__h4787 =
	     x__h4809 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign x__h4809 =
	     x__h4811 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4811 = x__h4813 ^ y__h4814 ;
  assign x__h4813 =
	     x__h4815 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4815 = x__h4817 ^ y__h4818 ;
  assign x__h4817 =
	     x__h4819 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4819 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h5145 = x__h5147 ^ y__h5148 ;
  assign x__h5147 =
	     x__h5169 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign x__h5169 =
	     x__h5171 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h5171 = x__h5173 ^ y__h5174 ;
  assign x__h5173 =
	     x__h5175 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h5175 = x__h5177 ^ y__h5178 ;
  assign x__h5177 =
	     x__h5179 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h5179 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ^
	     y__h5182 ;
  assign x__h5516 = x__h5518 ^ y__h5519 ;
  assign x__h5518 =
	     ~(x__h5542 ^
	       IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15) ;
  assign x__h5542 =
	     x__h5544 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h5544 =
	     x__h5546 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h5546 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h5825 = x__h5827 ^ y__h5828 ;
  assign x__h5827 =
	     x__h5849 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign x__h5849 =
	     x__h5851 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h5851 =
	     x__h5853 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h5853 =
	     x__h5855 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h5855 =
	     x__h5857 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h5857 = x__h5859 ^ y__h5860 ;
  assign x__h5859 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign x__h6174 = x__h6176 ^ y__h6177 ;
  assign x__h6176 =
	     x__h6198 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h6198 = x__h6200 ^ y__h4814 ;
  assign x__h6200 =
	     x__h6202 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h6202 =
	     x__h4819 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h7977 = rg_interface_2[127:64] ^ rg_state_0 ;
  assign y__h16968 = { x__h16969[27:0], x__h16969[63:28] } ;
  assign y__h16970 = { x__h16969[18:0], x__h16969[63:19] } ;
  assign y__h17000 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137 &
	     rg_state_1 ;
  assign y__h17328 = { x__h17329[38:0], x__h17329[63:39] } ;
  assign y__h17330 = { x__h17329[60:0], x__h17329[63:61] } ;
  assign y__h17356 =
	     rg_state_1 &
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137 ;
  assign y__h17364 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137 &
	     rg_state_3 ;
  assign y__h17699 = { x__h17700[5:0], x__h17700[63:6] } ;
  assign y__h17701 = { x__h17700[0], x__h17700[63:1] } ;
  assign y__h18008 = { x__h18009[16:0], x__h18009[63:17] } ;
  assign y__h18010 = { x__h18009[9:0], x__h18009[63:10] } ;
  assign y__h22031 = { x__h22032[27:0], x__h22032[63:28] } ;
  assign y__h22033 = { x__h22032[18:0], x__h22032[63:19] } ;
  assign y__h22063 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d262 &
	     rg_state_1 ;
  assign y__h22391 = { x__h22392[38:0], x__h22392[63:39] } ;
  assign y__h22393 = { x__h22392[60:0], x__h22392[63:61] } ;
  assign y__h22419 =
	     rg_state_1 &
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d262 ;
  assign y__h22423 = rg_state_3 & rg_state_1 ;
  assign y__h22427 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d262 &
	     rg_state_3 ;
  assign y__h22762 = { x__h22763[5:0], x__h22763[63:6] } ;
  assign y__h22764 = { x__h22763[0], x__h22763[63:1] } ;
  assign y__h23071 = { x__h23072[16:0], x__h23072[63:17] } ;
  assign y__h23073 = { x__h23072[9:0], x__h23072[63:10] } ;
  assign y__h23105 = rg_state_3 & rg_state_0 ;
  assign y__h23420 = { x__h23421[40:0], x__h23421[63:41] } ;
  assign y__h23422 = { x__h23421[6:0], x__h23421[63:7] } ;
  assign y__h23446 = rg_state_1 & rg_state_0 ;
  assign y__h4786 = { x__h4787[27:0], x__h4787[63:28] } ;
  assign y__h4788 = { x__h4787[18:0], x__h4787[63:19] } ;
  assign y__h4814 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign y__h4818 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign y__h5146 = { x__h5147[38:0], x__h5147[63:39] } ;
  assign y__h5148 = { x__h5147[60:0], x__h5147[63:61] } ;
  assign y__h5174 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign y__h5178 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign y__h5182 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 &
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign y__h5517 = { x__h5518[5:0], x__h5518[63:6] } ;
  assign y__h5519 = { x__h5518[0], x__h5518[63:1] } ;
  assign y__h5826 = { x__h5827[16:0], x__h5827[63:17] } ;
  assign y__h5828 = { x__h5827[9:0], x__h5827[63:10] } ;
  assign y__h5860 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign y__h6175 = { x__h6176[40:0], x__h6176[63:41] } ;
  assign y__h6177 = { x__h6176[6:0], x__h6176[63:7] } ;
  always@(x__h21085)
  begin
    case (x__h21085)
      4'd0: y__h21069 = 64'd75;
      4'd1: y__h21069 = 64'd90;
      4'd2: y__h21069 = 64'd105;
      4'd3: y__h21069 = 64'd120;
      4'd4: y__h21069 = 64'd135;
      4'd5: y__h21069 = 64'd150;
      4'd6: y__h21069 = 64'd165;
      4'd7: y__h21069 = 64'd180;
      4'd8: y__h21069 = 64'd195;
      4'd9: y__h21069 = 64'd210;
      4'd10: y__h21069 = 64'd225;
      4'd11: y__h21069 = 64'd240;
      default: y__h21069 = 64'b0 /* unspecified value */ ;
    endcase
  end
  always@(x__h16022)
  begin
    case (x__h16022)
      4'd0: y__h16006 = 64'd75;
      4'd1: y__h16006 = 64'd90;
      4'd2: y__h16006 = 64'd105;
      4'd3: y__h16006 = 64'd120;
      4'd4: y__h16006 = 64'd135;
      4'd5: y__h16006 = 64'd150;
      4'd6: y__h16006 = 64'd165;
      4'd7: y__h16006 = 64'd180;
      4'd8: y__h16006 = 64'd195;
      4'd9: y__h16006 = 64'd210;
      4'd10: y__h16006 = 64'd225;
      4'd11: y__h16006 = 64'd240;
      default: y__h16006 = 64'b0 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 4'd0;
	fsm_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	iv_constant <= `BSV_ASSIGNMENT_DELAY 64'h80800C0800000000;
	ready_ciphertext <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ready_decrypted_data <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ready_decrypted_tag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ready_tag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	req_associated_data <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_decrypted_data_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_decrypted_data_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_decryption_tag_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_decryption_tag_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encrypted_data_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encrypted_data_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encryption_tag_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encryption_tag_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_interface_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_state_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	select <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (counter_EN) counter <= `BSV_ASSIGNMENT_DELAY counter_D_IN;
	if (fsm_state_EN) fsm_state <= `BSV_ASSIGNMENT_DELAY fsm_state_D_IN;
	if (iv_constant_EN)
	  iv_constant <= `BSV_ASSIGNMENT_DELAY iv_constant_D_IN;
	if (ready_ciphertext_EN)
	  ready_ciphertext <= `BSV_ASSIGNMENT_DELAY ready_ciphertext_D_IN;
	if (ready_decrypted_data_EN)
	  ready_decrypted_data <= `BSV_ASSIGNMENT_DELAY
	      ready_decrypted_data_D_IN;
	if (ready_decrypted_tag_EN)
	  ready_decrypted_tag <= `BSV_ASSIGNMENT_DELAY
	      ready_decrypted_tag_D_IN;
	if (ready_tag_EN) ready_tag <= `BSV_ASSIGNMENT_DELAY ready_tag_D_IN;
	if (req_associated_data_EN)
	  req_associated_data <= `BSV_ASSIGNMENT_DELAY
	      req_associated_data_D_IN;
	if (rg_decrypted_data_0_EN)
	  rg_decrypted_data_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_decrypted_data_0_D_IN;
	if (rg_decrypted_data_1_EN)
	  rg_decrypted_data_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_decrypted_data_1_D_IN;
	if (rg_decryption_tag_0_EN)
	  rg_decryption_tag_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_decryption_tag_0_D_IN;
	if (rg_decryption_tag_1_EN)
	  rg_decryption_tag_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_decryption_tag_1_D_IN;
	if (rg_encrypted_data_0_EN)
	  rg_encrypted_data_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_encrypted_data_0_D_IN;
	if (rg_encrypted_data_1_EN)
	  rg_encrypted_data_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_encrypted_data_1_D_IN;
	if (rg_encryption_tag_0_EN)
	  rg_encryption_tag_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_encryption_tag_0_D_IN;
	if (rg_encryption_tag_1_EN)
	  rg_encryption_tag_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_encryption_tag_1_D_IN;
	if (rg_interface_0_EN)
	  rg_interface_0 <= `BSV_ASSIGNMENT_DELAY rg_interface_0_D_IN;
	if (rg_interface_1_EN)
	  rg_interface_1 <= `BSV_ASSIGNMENT_DELAY rg_interface_1_D_IN;
	if (rg_interface_2_EN)
	  rg_interface_2 <= `BSV_ASSIGNMENT_DELAY rg_interface_2_D_IN;
	if (rg_interface_3_EN)
	  rg_interface_3 <= `BSV_ASSIGNMENT_DELAY rg_interface_3_D_IN;
	if (rg_state_0_EN)
	  rg_state_0 <= `BSV_ASSIGNMENT_DELAY rg_state_0_D_IN;
	if (rg_state_1_EN)
	  rg_state_1 <= `BSV_ASSIGNMENT_DELAY rg_state_1_D_IN;
	if (rg_state_2_EN)
	  rg_state_2 <= `BSV_ASSIGNMENT_DELAY rg_state_2_D_IN;
	if (rg_state_3_EN)
	  rg_state_3 <= `BSV_ASSIGNMENT_DELAY rg_state_3_D_IN;
	if (rg_state_4_EN)
	  rg_state_4 <= `BSV_ASSIGNMENT_DELAY rg_state_4_D_IN;
	if (select_EN) select <= `BSV_ASSIGNMENT_DELAY select_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter = 4'hA;
    fsm_state = 3'h2;
    iv_constant = 64'hAAAAAAAAAAAAAAAA;
    ready_ciphertext = 1'h0;
    ready_decrypted_data = 1'h0;
    ready_decrypted_tag = 1'h0;
    ready_tag = 1'h0;
    req_associated_data = 1'h0;
    rg_decrypted_data_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_decrypted_data_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_decryption_tag_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_decryption_tag_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_encrypted_data_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_encrypted_data_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_encryption_tag_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_encryption_tag_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_interface_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_2 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_3 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_4 = 64'hAAAAAAAAAAAAAAAA;
    select = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
   
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4 &&
	  counter == 4'd0)
	$display("before intial permutation of p(12)=%h,%h,%h,%h,%h",
		 iv_constant,
		 rg_interface_0[127:64],
		 rg_interface_0[63:0],
		 rg_interface_3[127:64],
		 rg_interface_3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69,
		 INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4 &&
	  counter == 4'd11)
	$display("Final permutation result p(12): %h",
		 { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116,
		   IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102,
		   INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84,
		   IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69,
		   IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4)
	$display("before xoring with associated data input %h ,%h ,%h ,%h ,%h ",
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[319:256],
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[255:192],
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[191:128],
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[127:64],
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_33_XOR_rg_state__ETC___d152,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		 INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191,
		 rg_state_4_0_AND_rg_state_0_2_92_XOR_rg_state__ETC___d207,
		 din__h24457);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_encryption_state && counter == 4'd0)
	$display("encryption_result=%h%h",
		 encryption0__h12019,
		 encryption1__h12020);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decryption_state && counter == 4'd0)
	$display("rg_decrypted_data=%h%h",
		 rg_decrypted_data_0,
		 rg_decrypted_data_1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decryption_state && counter == 4'd0)
	$display("decryption_result=%h%h",
		 encryption0__h12019,
		 encryption1__h12020);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter == 4'd8)
	$display("processed_data1%h",
		 320'h80000000000000000000000000000000000000000000000000000000000000000000000000000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter == 4'd8)
	$display("packed_pre_finalized_data%h",
		 packed_pre_finalized_data__h19175);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter == 4'd8)
	$display("lv_updated_finalized_data%h",
		 lv_updated_finalized_data__h19847);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter == 4'd8)
	$display("lv_finalized_key%h", lv_finalized_key__h19881);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter != 4'd8)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter != 4'd8)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d137,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter != 4'd8)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_33_XOR_rg_state__ETC___d152,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		 INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191,
		 rg_state_4_0_AND_rg_state_0_2_92_XOR_rg_state__ETC___d207,
		 din__h24457);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d262,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 x__h22030 ^ y__h22031,
		 x__h22390 ^ y__h22391,
		 x__h22761 ^ y__h22762,
		 x__h23070 ^ y__h23071,
		 din__h24457);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 && select)
	$display("encryption_tag0%h", encryption_tag0__h24584);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 && select)
	$display("encryption_tag1%h", encryption_tag1__h24585);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 && !select)
	$display("encryption_tag0%h", encryption_tag0__h24584);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 && !select)
	$display("encryption_tag1%h", encryption_tag1__h24585);
  end
  // synopsys translate_on
endmodule  // mkAscon_engine

