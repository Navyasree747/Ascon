//
// Generated by Bluespec Compiler, version untagged-g2930c314 (build 2930c314)
//
// On Wed Nov 13 12:34:10 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_input_function             O     1 const
// ciphertext                     O   128 reg
// RDY_ciphertext                 O     1 reg
// decrypted_data                 O   128 reg
// RDY_decrypted_data             O     1 reg
// tag                            O   128 reg
// RDY_tag                        O     1 reg
// decrypted_tag                  O   128 reg
// RDY_decrypted_tag              O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// input_function_plaintext       I   128 reg
// input_function_associated_data  I   128 reg
// input_function_key             I   128 reg
// input_function_nonce           I   128 reg
// input_function_mode            I     1 reg
// EN_input_function              I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAscon_engine(CLK,
		      RST_N,

		      input_function_plaintext,
		      input_function_associated_data,
		      input_function_key,
		      input_function_nonce,
		      input_function_mode,
		      EN_input_function,
		      RDY_input_function,

		      ciphertext,
		      RDY_ciphertext,

		      decrypted_data,
		      RDY_decrypted_data,

		      tag,
		      RDY_tag,

		      decrypted_tag,
		      RDY_decrypted_tag);
  input  CLK;
  input  RST_N;

  // action method input_function
  input  [127 : 0] input_function_plaintext;
  input  [127 : 0] input_function_associated_data;
  input  [127 : 0] input_function_key;
  input  [127 : 0] input_function_nonce;
  input  input_function_mode;
  input  EN_input_function;
  output RDY_input_function;

  // value method ciphertext
  output [127 : 0] ciphertext;
  output RDY_ciphertext;

  // value method decrypted_data
  output [127 : 0] decrypted_data;
  output RDY_decrypted_data;

  // value method tag
  output [127 : 0] tag;
  output RDY_tag;

  // value method decrypted_tag
  output [127 : 0] decrypted_tag;
  output RDY_decrypted_tag;

  // signals for module outputs
  wire [127 : 0] ciphertext, decrypted_data, decrypted_tag, tag;
  wire RDY_ciphertext,
       RDY_decrypted_data,
       RDY_decrypted_tag,
       RDY_input_function,
       RDY_tag;

  // register counter
  reg [3 : 0] counter;
  reg [3 : 0] counter_D_IN;
  wire counter_EN;

  // register fsm_state
  reg [2 : 0] fsm_state;
  reg [2 : 0] fsm_state_D_IN;
  wire fsm_state_EN;

  // register iv_constant
  reg [63 : 0] iv_constant;
  wire [63 : 0] iv_constant_D_IN;
  wire iv_constant_EN;

  // register ready_ciphertext
  reg ready_ciphertext;
  wire ready_ciphertext_D_IN, ready_ciphertext_EN;

  // register ready_decrypted_data
  reg ready_decrypted_data;
  wire ready_decrypted_data_D_IN, ready_decrypted_data_EN;

  // register ready_decrypted_tag
  reg ready_decrypted_tag;
  wire ready_decrypted_tag_D_IN, ready_decrypted_tag_EN;

  // register ready_tag
  reg ready_tag;
  wire ready_tag_D_IN, ready_tag_EN;

  // register req_associated_data
  reg req_associated_data;
  wire req_associated_data_D_IN, req_associated_data_EN;

  // register rg_decrypted_data_0
  reg [63 : 0] rg_decrypted_data_0;
  wire [63 : 0] rg_decrypted_data_0_D_IN;
  wire rg_decrypted_data_0_EN;

  // register rg_decrypted_data_1
  reg [63 : 0] rg_decrypted_data_1;
  wire [63 : 0] rg_decrypted_data_1_D_IN;
  wire rg_decrypted_data_1_EN;

  // register rg_decryption_tag_0
  reg [63 : 0] rg_decryption_tag_0;
  wire [63 : 0] rg_decryption_tag_0_D_IN;
  wire rg_decryption_tag_0_EN;

  // register rg_decryption_tag_1
  reg [63 : 0] rg_decryption_tag_1;
  wire [63 : 0] rg_decryption_tag_1_D_IN;
  wire rg_decryption_tag_1_EN;

  // register rg_encrypted_data_0
  reg [63 : 0] rg_encrypted_data_0;
  wire [63 : 0] rg_encrypted_data_0_D_IN;
  wire rg_encrypted_data_0_EN;

  // register rg_encrypted_data_1
  reg [63 : 0] rg_encrypted_data_1;
  wire [63 : 0] rg_encrypted_data_1_D_IN;
  wire rg_encrypted_data_1_EN;

  // register rg_encryption_tag_0
  reg [63 : 0] rg_encryption_tag_0;
  wire [63 : 0] rg_encryption_tag_0_D_IN;
  wire rg_encryption_tag_0_EN;

  // register rg_encryption_tag_1
  reg [63 : 0] rg_encryption_tag_1;
  wire [63 : 0] rg_encryption_tag_1_D_IN;
  wire rg_encryption_tag_1_EN;

  // register rg_interface_0
  reg [127 : 0] rg_interface_0;
  wire [127 : 0] rg_interface_0_D_IN;
  wire rg_interface_0_EN;

  // register rg_interface_1
  reg [127 : 0] rg_interface_1;
  wire [127 : 0] rg_interface_1_D_IN;
  wire rg_interface_1_EN;

  // register rg_interface_2
  reg [127 : 0] rg_interface_2;
  wire [127 : 0] rg_interface_2_D_IN;
  wire rg_interface_2_EN;

  // register rg_interface_3
  reg [127 : 0] rg_interface_3;
  wire [127 : 0] rg_interface_3_D_IN;
  wire rg_interface_3_EN;

  // register rg_state_0
  reg [63 : 0] rg_state_0;
  reg [63 : 0] rg_state_0_D_IN;
  wire rg_state_0_EN;

  // register rg_state_1
  reg [63 : 0] rg_state_1;
  reg [63 : 0] rg_state_1_D_IN;
  wire rg_state_1_EN;

  // register rg_state_2
  reg [63 : 0] rg_state_2;
  reg [63 : 0] rg_state_2_D_IN;
  wire rg_state_2_EN;

  // register rg_state_3
  reg [63 : 0] rg_state_3;
  reg [63 : 0] rg_state_3_D_IN;
  wire rg_state_3_EN;

  // register rg_state_4
  reg [63 : 0] rg_state_4;
  reg [63 : 0] rg_state_4_D_IN;
  wire rg_state_4_EN;

  // register select
  reg select;
  wire select_D_IN, select_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_associated_data_state,
       CAN_FIRE_RL_decryption_state,
       CAN_FIRE_RL_encryption_state,
       CAN_FIRE_RL_finalization_state,
       CAN_FIRE_RL_intialization_state,
       CAN_FIRE_RL_permutate_associated_data_state,
       CAN_FIRE_RL_permutate_encrypt_decrypt_state,
       CAN_FIRE_input_function,
       WILL_FIRE_RL_associated_data_state,
       WILL_FIRE_RL_decryption_state,
       WILL_FIRE_RL_encryption_state,
       WILL_FIRE_RL_finalization_state,
       WILL_FIRE_RL_intialization_state,
       WILL_FIRE_RL_permutate_associated_data_state,
       WILL_FIRE_RL_permutate_encrypt_decrypt_state,
       WILL_FIRE_input_function;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_rg_state_0_write_1__VAL_1,
		MUX_rg_state_0_write_1__VAL_3,
		MUX_rg_state_0_write_1__VAL_4,
		MUX_rg_state_0_write_1__VAL_5,
		MUX_rg_state_0_write_1__VAL_6,
		MUX_rg_state_1_write_1__VAL_1,
		MUX_rg_state_1_write_1__VAL_3,
		MUX_rg_state_1_write_1__VAL_4,
		MUX_rg_state_1_write_1__VAL_5,
		MUX_rg_state_1_write_1__VAL_6,
		MUX_rg_state_2_write_1__VAL_1,
		MUX_rg_state_2_write_1__VAL_2,
		MUX_rg_state_2_write_1__VAL_5,
		MUX_rg_state_2_write_1__VAL_6,
		MUX_rg_state_3_write_1__VAL_1,
		MUX_rg_state_3_write_1__VAL_2,
		MUX_rg_state_3_write_1__VAL_5,
		MUX_rg_state_3_write_1__VAL_6,
		MUX_rg_state_4_write_1__VAL_2,
		MUX_rg_state_4_write_1__VAL_4,
		MUX_rg_state_4_write_1__VAL_5,
		MUX_rg_state_4_write_1__VAL_6;
  wire [3 : 0] MUX_counter_write_1__VAL_2,
	       MUX_counter_write_1__VAL_4,
	       MUX_counter_write_1__VAL_5;
  wire [2 : 0] MUX_fsm_state_write_1__VAL_6;
  wire MUX_counter_write_1__SEL_1,
       MUX_counter_write_1__SEL_2,
       MUX_counter_write_1__SEL_3,
       MUX_fsm_state_write_1__SEL_2,
       MUX_fsm_state_write_1__SEL_3,
       MUX_fsm_state_write_1__SEL_4,
       MUX_fsm_state_write_1__SEL_5,
       MUX_fsm_state_write_1__SEL_6,
       MUX_fsm_state_write_1__SEL_7,
       MUX_fsm_state_write_1__SEL_8,
       MUX_rg_state_0_write_1__SEL_2,
       MUX_rg_state_2_write_1__PSEL_4,
       MUX_rg_state_2_write_1__SEL_4,
       MUX_rg_state_3_write_1__SEL_4,
       MUX_rg_state_4_write_1__SEL_4;

  // remaining internal signals
  reg [63 : 0] y__h20548, y__h25671;
  wire [319 : 0] _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_47_XOR__ETC___d251,
		 lv_finalized_key__h24489,
		 lv_updated_finalized_data__h24455,
		 packed_pre_finalized_data__h23783,
		 padded_key__h1678,
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49;
  wire [63 : 0] IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94,
		INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76,
		INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84,
		INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181,
		INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189,
		INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d281,
		din__h10845,
		encryption0__h16560,
		encryption1__h16561,
		encryption_tag0__h29252,
		encryption_tag1__h29253,
		rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136,
		rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d263,
		rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198,
		rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206,
		rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d284,
		rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143,
		rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151,
		rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219,
		rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d269,
		rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165,
		rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d278,
		x__h12058,
		x__h21414,
		x__h21416,
		x__h21418,
		x__h21420,
		x__h21541,
		x__h21543,
		x__h21545,
		x__h21547,
		x__h21549,
		x__h21551,
		x__h21681,
		x__h21755,
		x__h21757,
		x__h22091,
		x__h22332,
		x__h22573,
		x__h22814,
		x__h26537,
		x__h26539,
		x__h26541,
		x__h26543,
		x__h26545,
		x__h26664,
		x__h26666,
		x__h26668,
		x__h26670,
		x__h26672,
		x__h26674,
		x__h26804,
		x__h26806,
		x__h26808,
		x__h26878,
		x__h26880,
		x__h26882,
		x__h26884,
		x__h26886,
		x__h26888,
		x__h26994,
		x__h26996,
		x__h26998,
		x__h27000,
		x__h27214,
		x__h27455,
		x__h27696,
		x__h27937,
		x__h28178,
		x__h28180,
		x__h4600,
		x__h4602,
		x__h4604,
		x__h4606,
		x__h4608,
		x__h4610,
		x__h4727,
		x__h4729,
		x__h4731,
		x__h4733,
		x__h4735,
		x__h4737,
		x__h4867,
		x__h4869,
		x__h4871,
		x__h4941,
		x__h4943,
		x__h4945,
		x__h4947,
		x__h4949,
		x__h4951,
		x__h5057,
		x__h5059,
		x__h5061,
		x__h5277,
		x__h5518,
		x__h5759,
		x__h6000,
		x__h6241,
		x__h7531,
		y__h21423,
		y__h21546,
		y__h21554,
		y__h22092,
		y__h22094,
		y__h22333,
		y__h22335,
		y__h22574,
		y__h22576,
		y__h22815,
		y__h22817,
		y__h26546,
		y__h26669,
		y__h26673,
		y__h26677,
		y__h26889,
		y__h26997,
		y__h27215,
		y__h27217,
		y__h27456,
		y__h27458,
		y__h27697,
		y__h27699,
		y__h27938,
		y__h27940,
		y__h28179,
		y__h28181,
		y__h4605,
		y__h4609,
		y__h4732,
		y__h4736,
		y__h4740,
		y__h4952,
		y__h5278,
		y__h5280,
		y__h5519,
		y__h5521,
		y__h5760,
		y__h5762,
		y__h6001,
		y__h6003,
		y__h6242,
		y__h6244;
  wire [3 : 0] x__h20564, x__h25687, x__h29164;
  wire counter_ULT_12___d4;

  // action method input_function
  assign RDY_input_function = 1'd1 ;
  assign CAN_FIRE_input_function = 1'd1 ;
  assign WILL_FIRE_input_function = EN_input_function ;

  // value method ciphertext
  assign ciphertext = { rg_encrypted_data_1, rg_encrypted_data_0 } ;
  assign RDY_ciphertext = ready_ciphertext ;

  // value method decrypted_data
  assign decrypted_data = { rg_decrypted_data_1, rg_decrypted_data_0 } ;
  assign RDY_decrypted_data = ready_decrypted_data ;

  // value method tag
  assign tag = { rg_encryption_tag_1, rg_encryption_tag_0 } ;
  assign RDY_tag = ready_tag ;

  // value method decrypted_tag
  assign decrypted_tag = { rg_decryption_tag_1, rg_decryption_tag_0 } ;
  assign RDY_decrypted_tag = ready_decrypted_tag ;

  // rule RL_intialization_state
  assign CAN_FIRE_RL_intialization_state = fsm_state == 3'd1 ;
  assign WILL_FIRE_RL_intialization_state = CAN_FIRE_RL_intialization_state ;

  // rule RL_associated_data_state
  assign CAN_FIRE_RL_associated_data_state = fsm_state == 3'd2 ;
  assign WILL_FIRE_RL_associated_data_state =
	     CAN_FIRE_RL_associated_data_state ;

  // rule RL_permutate_associated_data_state
  assign CAN_FIRE_RL_permutate_associated_data_state = fsm_state == 3'd3 ;
  assign WILL_FIRE_RL_permutate_associated_data_state =
	     CAN_FIRE_RL_permutate_associated_data_state ;

  // rule RL_encryption_state
  assign CAN_FIRE_RL_encryption_state = fsm_state == 3'd4 ;
  assign WILL_FIRE_RL_encryption_state = CAN_FIRE_RL_encryption_state ;

  // rule RL_decryption_state
  assign CAN_FIRE_RL_decryption_state = fsm_state == 3'd5 ;
  assign WILL_FIRE_RL_decryption_state = CAN_FIRE_RL_decryption_state ;

  // rule RL_permutate_encrypt_decrypt_state
  assign CAN_FIRE_RL_permutate_encrypt_decrypt_state = fsm_state == 3'd6 ;
  assign WILL_FIRE_RL_permutate_encrypt_decrypt_state =
	     CAN_FIRE_RL_permutate_encrypt_decrypt_state ;

  // rule RL_finalization_state
  assign CAN_FIRE_RL_finalization_state = fsm_state == 3'd7 ;
  assign WILL_FIRE_RL_finalization_state = CAN_FIRE_RL_finalization_state ;

  // inputs to muxes for submodule ports
  assign MUX_counter_write_1__SEL_1 =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ;
  assign MUX_counter_write_1__SEL_2 =
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ;
  assign MUX_counter_write_1__SEL_3 =
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ||
	     WILL_FIRE_RL_permutate_associated_data_state ;
  assign MUX_fsm_state_write_1__SEL_2 =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 ;
  assign MUX_fsm_state_write_1__SEL_3 =
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter == 4'd8 ;
  assign MUX_fsm_state_write_1__SEL_4 =
	     WILL_FIRE_RL_decryption_state && counter != 4'd0 ;
  assign MUX_fsm_state_write_1__SEL_5 =
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ;
  assign MUX_fsm_state_write_1__SEL_6 =
	     WILL_FIRE_RL_permutate_associated_data_state && counter == 4'd8 ;
  assign MUX_fsm_state_write_1__SEL_7 =
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter == 4'd8 ;
  assign MUX_fsm_state_write_1__SEL_8 =
	     WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4 ;
  assign MUX_rg_state_0_write_1__SEL_2 =
	     WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8 ;
  assign MUX_rg_state_2_write_1__PSEL_4 =
	     WILL_FIRE_RL_decryption_state || WILL_FIRE_RL_encryption_state ;
  assign MUX_rg_state_2_write_1__SEL_4 =
	     MUX_rg_state_2_write_1__PSEL_4 && counter != 4'd0 ;
  assign MUX_rg_state_3_write_1__SEL_4 =
	     MUX_rg_state_2_write_1__PSEL_4 && counter != 4'd0 ;
  assign MUX_rg_state_4_write_1__SEL_4 =
	     MUX_rg_state_2_write_1__PSEL_4 && counter != 4'd0 ;
  assign MUX_counter_write_1__VAL_2 = (counter == 4'd8) ? 4'd0 : x__h29164 ;
  assign MUX_counter_write_1__VAL_4 = (counter == 4'd0) ? x__h29164 : 4'd0 ;
  assign MUX_counter_write_1__VAL_5 = counter_ULT_12___d4 ? x__h29164 : 4'd0 ;
  assign MUX_fsm_state_write_1__VAL_6 = select ? 3'd4 : 3'd5 ;
  assign MUX_rg_state_0_write_1__VAL_1 = x__h27214 ^ y__h27215 ;
  assign MUX_rg_state_0_write_1__VAL_3 =
	     (counter == 4'd0) ? encryption0__h16560 : rg_state_0 ;
  assign MUX_rg_state_0_write_1__VAL_4 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[319:256] ;
  assign MUX_rg_state_0_write_1__VAL_5 =
	     req_associated_data ?
	       x__h7531 :
	       ((counter == 4'd8) ?
		  din__h10845 :
		  rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151) ;
  assign MUX_rg_state_0_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_47_XOR__ETC___d251[319:256] :
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151 ;
  assign MUX_rg_state_1_write_1__VAL_1 = x__h27455 ^ y__h27456 ;
  assign MUX_rg_state_1_write_1__VAL_3 =
	     (counter == 4'd0) ? encryption1__h16561 : rg_state_1 ;
  assign MUX_rg_state_1_write_1__VAL_4 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[255:192] ;
  assign MUX_rg_state_1_write_1__VAL_5 =
	     req_associated_data ?
	       x__h12058 :
	       ((counter == 4'd8) ?
		  rg_state_1 :
		  rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173) ;
  assign MUX_rg_state_1_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_47_XOR__ETC___d251[255:192] :
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173 ;
  assign MUX_rg_state_2_write_1__VAL_1 = x__h27696 ^ y__h27697 ;
  assign MUX_rg_state_2_write_1__VAL_2 =
	     (counter == 4'd8) ?
	       rg_state_2 :
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189 ;
  assign MUX_rg_state_2_write_1__VAL_5 =
	     counter_ULT_12___d4 ?
	       INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[191:128] ;
  assign MUX_rg_state_2_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_47_XOR__ETC___d251[191:128] :
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189 ;
  assign MUX_rg_state_3_write_1__VAL_1 = x__h27937 ^ y__h27938 ;
  assign MUX_rg_state_3_write_1__VAL_2 =
	     (counter == 4'd8) ?
	       rg_state_3 :
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206 ;
  assign MUX_rg_state_3_write_1__VAL_5 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[127:64] ;
  assign MUX_rg_state_3_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_47_XOR__ETC___d251[127:64] :
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206 ;
  assign MUX_rg_state_4_write_1__VAL_2 =
	     (counter == 4'd8) ?
	       rg_state_4 :
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219 ;
  assign MUX_rg_state_4_write_1__VAL_4 =
	     { rg_state_4[63:1], ~rg_state_4[0] } ;
  assign MUX_rg_state_4_write_1__VAL_5 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116 :
	       rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[63:0] ;
  assign MUX_rg_state_4_write_1__VAL_6 =
	     (counter == 4'd8) ?
	       _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_47_XOR__ETC___d251[63:0] :
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219 ;

  // register counter
  always@(MUX_counter_write_1__SEL_1 or
	  x__h29164 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_counter_write_1__VAL_2 or
	  MUX_counter_write_1__SEL_3 or
	  MUX_rg_state_2_write_1__PSEL_4 or
	  MUX_counter_write_1__VAL_4 or
	  WILL_FIRE_RL_intialization_state or MUX_counter_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1: counter_D_IN = x__h29164;
      MUX_counter_write_1__SEL_2: counter_D_IN = MUX_counter_write_1__VAL_2;
      MUX_counter_write_1__SEL_3: counter_D_IN = MUX_counter_write_1__VAL_2;
      MUX_rg_state_2_write_1__PSEL_4:
	  counter_D_IN = MUX_counter_write_1__VAL_4;
      WILL_FIRE_RL_intialization_state:
	  counter_D_IN = MUX_counter_write_1__VAL_5;
      default: counter_D_IN = 4'b0 /* unspecified value */ ;
    endcase
  end
  assign counter_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ||
	     WILL_FIRE_RL_permutate_associated_data_state ||
	     WILL_FIRE_RL_decryption_state ||
	     WILL_FIRE_RL_encryption_state ||
	     WILL_FIRE_RL_intialization_state ;

  // register fsm_state
  always@(EN_input_function or
	  MUX_fsm_state_write_1__SEL_2 or
	  MUX_fsm_state_write_1__SEL_3 or
	  MUX_fsm_state_write_1__SEL_4 or
	  MUX_fsm_state_write_1__SEL_5 or
	  MUX_fsm_state_write_1__SEL_6 or
	  MUX_fsm_state_write_1__VAL_6 or
	  MUX_fsm_state_write_1__SEL_7 or MUX_fsm_state_write_1__SEL_8)
  case (1'b1)
    EN_input_function: fsm_state_D_IN = 3'd1;
    MUX_fsm_state_write_1__SEL_2: fsm_state_D_IN = 3'd0;
    MUX_fsm_state_write_1__SEL_3: fsm_state_D_IN = 3'd7;
    MUX_fsm_state_write_1__SEL_4 || MUX_fsm_state_write_1__SEL_5:
	fsm_state_D_IN = 3'd6;
    MUX_fsm_state_write_1__SEL_6:
	fsm_state_D_IN = MUX_fsm_state_write_1__VAL_6;
    MUX_fsm_state_write_1__SEL_7: fsm_state_D_IN = 3'd3;
    MUX_fsm_state_write_1__SEL_8: fsm_state_D_IN = 3'd2;
    default: fsm_state_D_IN = 3'b0 /* unspecified value */ ;
  endcase
  assign fsm_state_EN =
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter == 4'd8 ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state &&
	     counter == 4'd8 ||
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 ||
	     WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4 ||
	     (WILL_FIRE_RL_decryption_state ||
	      WILL_FIRE_RL_encryption_state) &&
	     counter != 4'd0 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter == 4'd8 ||
	     EN_input_function ;

  // register iv_constant
  assign iv_constant_D_IN = 64'h0 ;
  assign iv_constant_EN = 1'b0 ;

  // register ready_ciphertext
  assign ready_ciphertext_D_IN = 1'd1 ;
  assign ready_ciphertext_EN = MUX_fsm_state_write_1__SEL_5 ;

  // register ready_decrypted_data
  assign ready_decrypted_data_D_IN = 1'd1 ;
  assign ready_decrypted_data_EN = MUX_fsm_state_write_1__SEL_4 ;

  // register ready_decrypted_tag
  assign ready_decrypted_tag_D_IN = 1'd1 ;
  assign ready_decrypted_tag_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     !select ;

  // register ready_tag
  assign ready_tag_D_IN = 1'd1 ;
  assign ready_tag_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     select ;

  // register req_associated_data
  assign req_associated_data_D_IN = 1'd0 ;
  assign req_associated_data_EN =
	     WILL_FIRE_RL_associated_data_state && req_associated_data ;

  // register rg_decrypted_data_0
  assign rg_decrypted_data_0_D_IN = rg_state_1 ;
  assign rg_decrypted_data_0_EN = MUX_fsm_state_write_1__SEL_4 ;

  // register rg_decrypted_data_1
  assign rg_decrypted_data_1_D_IN = rg_state_0 ;
  assign rg_decrypted_data_1_EN = MUX_fsm_state_write_1__SEL_4 ;

  // register rg_decryption_tag_0
  assign rg_decryption_tag_0_D_IN = encryption_tag1__h29253 ;
  assign rg_decryption_tag_0_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     !select ;

  // register rg_decryption_tag_1
  assign rg_decryption_tag_1_D_IN = encryption_tag0__h29252 ;
  assign rg_decryption_tag_1_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     !select ;

  // register rg_encrypted_data_0
  assign rg_encrypted_data_0_D_IN = rg_state_1 ;
  assign rg_encrypted_data_0_EN = MUX_fsm_state_write_1__SEL_5 ;

  // register rg_encrypted_data_1
  assign rg_encrypted_data_1_D_IN = rg_state_0 ;
  assign rg_encrypted_data_1_EN = MUX_fsm_state_write_1__SEL_5 ;

  // register rg_encryption_tag_0
  assign rg_encryption_tag_0_D_IN = encryption_tag1__h29253 ;
  assign rg_encryption_tag_0_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     select ;

  // register rg_encryption_tag_1
  assign rg_encryption_tag_1_D_IN = encryption_tag0__h29252 ;
  assign rg_encryption_tag_1_EN =
	     WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 &&
	     select ;

  // register rg_interface_0
  assign rg_interface_0_D_IN = input_function_key ;
  assign rg_interface_0_EN = EN_input_function ;

  // register rg_interface_1
  assign rg_interface_1_D_IN = input_function_plaintext ;
  assign rg_interface_1_EN = EN_input_function ;

  // register rg_interface_2
  assign rg_interface_2_D_IN = input_function_associated_data ;
  assign rg_interface_2_EN = EN_input_function ;

  // register rg_interface_3
  assign rg_interface_3_D_IN = input_function_nonce ;
  assign rg_interface_3_EN = EN_input_function ;

  // register rg_state_0
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_0_write_1__VAL_1 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151 or
	  MUX_rg_state_2_write_1__PSEL_4 or
	  MUX_rg_state_0_write_1__VAL_3 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_0_write_1__VAL_4 or
	  WILL_FIRE_RL_associated_data_state or
	  MUX_rg_state_0_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_0_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_1;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_0_D_IN =
	      rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151;
      MUX_rg_state_2_write_1__PSEL_4:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_3;
      WILL_FIRE_RL_intialization_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_4;
      WILL_FIRE_RL_associated_data_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_6;
      default: rg_state_0_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_0_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_decryption_state ||
	     WILL_FIRE_RL_encryption_state ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_associated_data_state ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ;

  // register rg_state_1
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_1_write_1__VAL_1 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173 or
	  MUX_rg_state_2_write_1__PSEL_4 or
	  MUX_rg_state_1_write_1__VAL_3 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_1_write_1__VAL_4 or
	  WILL_FIRE_RL_associated_data_state or
	  MUX_rg_state_1_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_1_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_1;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_1_D_IN =
	      rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173;
      MUX_rg_state_2_write_1__PSEL_4:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_3;
      WILL_FIRE_RL_intialization_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_4;
      WILL_FIRE_RL_associated_data_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_6;
      default: rg_state_1_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_1_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_decryption_state ||
	     WILL_FIRE_RL_encryption_state ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_associated_data_state ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ;

  // register rg_state_2
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_2_write_1__VAL_1 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_rg_state_2_write_1__VAL_2 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189 or
	  MUX_rg_state_2_write_1__SEL_4 or
	  rg_state_2 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_2_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_2_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_1;
      MUX_counter_write_1__SEL_2:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_2;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_2_D_IN =
	      INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189;
      MUX_rg_state_2_write_1__SEL_4: rg_state_2_D_IN = rg_state_2;
      WILL_FIRE_RL_intialization_state:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_6;
      default: rg_state_2_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_2_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     (WILL_FIRE_RL_decryption_state ||
	      WILL_FIRE_RL_encryption_state) &&
	     counter != 4'd0 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ;

  // register rg_state_3
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_3_write_1__VAL_1 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_rg_state_3_write_1__VAL_2 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206 or
	  MUX_rg_state_3_write_1__SEL_4 or
	  rg_state_3 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_3_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_3_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_1;
      MUX_counter_write_1__SEL_2:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_2;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_3_D_IN =
	      rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206;
      MUX_rg_state_3_write_1__SEL_4: rg_state_3_D_IN = rg_state_3;
      WILL_FIRE_RL_intialization_state:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_6;
      default: rg_state_3_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_3_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     (WILL_FIRE_RL_decryption_state ||
	      WILL_FIRE_RL_encryption_state) &&
	     counter != 4'd0 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ;

  // register rg_state_4
  always@(MUX_counter_write_1__SEL_1 or
	  rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_rg_state_4_write_1__VAL_2 or
	  MUX_rg_state_0_write_1__SEL_2 or
	  MUX_rg_state_4_write_1__SEL_4 or
	  MUX_rg_state_4_write_1__VAL_4 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_4_write_1__VAL_5 or
	  WILL_FIRE_RL_permutate_encrypt_decrypt_state or
	  MUX_rg_state_4_write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1:
	  rg_state_4_D_IN =
	      rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219;
      MUX_counter_write_1__SEL_2:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_2;
      MUX_rg_state_0_write_1__SEL_2:
	  rg_state_4_D_IN =
	      rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219;
      MUX_rg_state_4_write_1__SEL_4:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_4;
      WILL_FIRE_RL_intialization_state:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_5;
      WILL_FIRE_RL_permutate_encrypt_decrypt_state:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_6;
      default: rg_state_4_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_4_EN =
	     WILL_FIRE_RL_finalization_state && counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     (WILL_FIRE_RL_decryption_state ||
	      WILL_FIRE_RL_encryption_state) &&
	     counter != 4'd0 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_permutate_encrypt_decrypt_state ;

  // register select
  assign select_D_IN = input_function_mode ;
  assign select_EN = EN_input_function ;

  // remaining internal signals
  assign IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 =
	     (counter == 4'd0) ? iv_constant : rg_state_0 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 =
	     (counter == 4'd0) ? rg_interface_0[127:64] : rg_state_1 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23 =
	     (counter == 4'd0) ? rg_interface_0[63:0] : rg_state_2 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23 ^
	     y__h25671 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 =
	     (counter == 4'd0) ? rg_interface_3[127:64] : rg_state_3 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102 =
	     x__h6000 ^ y__h6001 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108 =
	     x__h5057 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 =
	     (counter == 4'd0) ? rg_interface_3[63:0] : rg_state_4 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116 =
	     x__h6241 ^ y__h6242 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37 =
	     x__h4600 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45 =
	     x__h5277 ^ y__h5278 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61 =
	     x__h4727 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69 =
	     x__h5518 ^ y__h5519 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94 =
	     x__h4941 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76 =
	     ~(x__h4867 ^
	       IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15) ;
  assign INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84 =
	     x__h5759 ^ y__h5760 ;
  assign INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181 =
	     ~(x__h21681 ^ rg_state_1) ;
  assign INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189 =
	     x__h22573 ^ y__h22574 ;
  assign INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d281 =
	     ~(x__h26804 ^ rg_state_1) ;
  assign _0b0_CONCAT_rg_interface_0_2_CONCAT_0b0_47_XOR__ETC___d251 =
	     lv_finalized_key__h24489 ^ lv_updated_finalized_data__h24455 ;
  assign counter_ULT_12___d4 = counter < 4'd12 ;
  assign din__h10845 = { ~rg_state_0[63], rg_state_0[62:0] } ;
  assign encryption0__h16560 = rg_interface_1[127:64] ^ rg_state_0 ;
  assign encryption1__h16561 = rg_interface_1[63:0] ^ rg_state_1 ;
  assign encryption_tag0__h29252 = rg_interface_0[127:64] ^ rg_state_3 ;
  assign encryption_tag1__h29253 = rg_interface_0[63:0] ^ rg_state_4 ;
  assign lv_finalized_key__h24489 = { 128'b0, rg_interface_0, 64'b0 } ;
  assign lv_updated_finalized_data__h24455 =
	     { ~rg_state_0[63],
	       rg_state_0[62:0],
	       rg_state_1,
	       rg_state_2,
	       rg_state_3,
	       rg_state_4 } ;
  assign packed_pre_finalized_data__h23783 =
	     { rg_state_0, rg_state_1, rg_state_2, rg_state_3, rg_state_4 } ;
  assign padded_key__h1678 = { 192'b0, rg_interface_0 } ;
  assign rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49 =
	     packed_pre_finalized_data__h23783 ^ padded_key__h1678 ;
  assign rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 =
	     rg_state_2 ^ y__h20548 ;
  assign rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d263 =
	     rg_state_2 ^ y__h25671 ;
  assign rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198 =
	     x__h21755 ^ rg_state_0 ;
  assign rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206 =
	     x__h22814 ^ y__h22815 ;
  assign rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d284 =
	     x__h26878 ^ rg_state_0 ;
  assign rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143 =
	     x__h21414 ^ rg_state_0 ;
  assign rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151 =
	     x__h22091 ^ y__h22092 ;
  assign rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219 =
	     x__h28178 ^ y__h28179 ;
  assign rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d269 =
	     x__h26537 ^ rg_state_0 ;
  assign rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165 =
	     x__h21541 ^ rg_state_0 ;
  assign rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173 =
	     x__h22332 ^ y__h22333 ;
  assign rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d278 =
	     x__h26664 ^ rg_state_0 ;
  assign x__h12058 = rg_interface_2[63:0] ^ rg_state_1 ;
  assign x__h20564 = 4'd7 - counter ;
  assign x__h21414 = x__h21416 ^ rg_state_1 ;
  assign x__h21416 = x__h21418 ^ y__h26997 ;
  assign x__h21418 =
	     x__h21420 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 ;
  assign x__h21420 = x__h26545 ^ y__h21423 ;
  assign x__h21541 = x__h21543 ^ rg_state_1 ;
  assign x__h21543 = x__h21545 ^ y__h21546 ;
  assign x__h21545 =
	     x__h21547 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 ;
  assign x__h21547 = x__h21549 ^ y__h26673 ;
  assign x__h21549 = x__h21551 ^ rg_state_3 ;
  assign x__h21551 = rg_state_4 ^ y__h21554 ;
  assign x__h21681 =
	     x__h26806 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 ;
  assign x__h21755 = x__h21757 ^ rg_state_1 ;
  assign x__h21757 =
	     x__h26882 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 ;
  assign x__h22091 =
	     rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143 ^
	     y__h22094 ;
  assign x__h22332 =
	     rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165 ^
	     y__h22335 ;
  assign x__h22573 =
	     INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181 ^
	     y__h22576 ;
  assign x__h22814 =
	     rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198 ^
	     y__h22817 ;
  assign x__h25687 = 4'd11 - counter ;
  assign x__h26537 = x__h26539 ^ rg_state_1 ;
  assign x__h26539 = x__h26541 ^ y__h26997 ;
  assign x__h26541 =
	     x__h26543 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d263 ;
  assign x__h26543 = x__h26545 ^ y__h26546 ;
  assign x__h26545 = x__h27000 ^ rg_state_3 ;
  assign x__h26664 = x__h26666 ^ rg_state_1 ;
  assign x__h26666 = x__h26668 ^ y__h26669 ;
  assign x__h26668 =
	     x__h26670 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d263 ;
  assign x__h26670 = x__h26672 ^ y__h26673 ;
  assign x__h26672 = x__h26674 ^ rg_state_3 ;
  assign x__h26674 = rg_state_4 ^ y__h26677 ;
  assign x__h26804 =
	     x__h26806 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d263 ;
  assign x__h26806 = x__h26808 ^ rg_state_4 ;
  assign x__h26808 = rg_state_4 & rg_state_3 ;
  assign x__h26878 = x__h26880 ^ rg_state_1 ;
  assign x__h26880 =
	     x__h26882 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d263 ;
  assign x__h26882 = x__h26884 ^ rg_state_3 ;
  assign x__h26884 = x__h26886 ^ rg_state_4 ;
  assign x__h26886 = x__h26888 ^ y__h26889 ;
  assign x__h26888 = rg_state_4 & rg_state_0 ;
  assign x__h26994 = x__h26996 ^ y__h26997 ;
  assign x__h26996 = x__h26998 ^ rg_state_3 ;
  assign x__h26998 = x__h27000 ^ rg_state_4 ;
  assign x__h27000 = rg_state_4 & rg_state_1 ;
  assign x__h27214 =
	     rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d269 ^
	     y__h27217 ;
  assign x__h27455 =
	     rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d278 ^
	     y__h27458 ;
  assign x__h27696 =
	     INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d281 ^
	     y__h27699 ;
  assign x__h27937 =
	     rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d284 ^
	     y__h27940 ;
  assign x__h28178 = x__h28180 ^ y__h28181 ;
  assign x__h28180 = x__h26994 ^ rg_state_1 ;
  assign x__h29164 = counter + 4'd1 ;
  assign x__h4600 =
	     x__h4602 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4602 = x__h4604 ^ y__h4605 ;
  assign x__h4604 =
	     x__h4606 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4606 = x__h4608 ^ y__h4609 ;
  assign x__h4608 =
	     x__h4610 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4610 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4727 =
	     x__h4729 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4729 = x__h4731 ^ y__h4732 ;
  assign x__h4731 =
	     x__h4733 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4733 = x__h4735 ^ y__h4736 ;
  assign x__h4735 =
	     x__h4737 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4737 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ^
	     y__h4740 ;
  assign x__h4867 =
	     x__h4869 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4869 =
	     x__h4871 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h4871 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4941 =
	     x__h4943 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4943 =
	     x__h4945 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4945 =
	     x__h4947 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4947 =
	     x__h4949 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h4949 = x__h4951 ^ y__h4952 ;
  assign x__h4951 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign x__h5057 = x__h5059 ^ y__h4605 ;
  assign x__h5059 =
	     x__h5061 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h5061 =
	     x__h4610 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h5277 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37 ^
	     y__h5280 ;
  assign x__h5518 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61 ^
	     y__h5521 ;
  assign x__h5759 =
	     INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76 ^
	     y__h5762 ;
  assign x__h6000 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94 ^
	     y__h6003 ;
  assign x__h6241 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108 ^
	     y__h6244 ;
  assign x__h7531 = rg_interface_2[127:64] ^ rg_state_0 ;
  assign y__h21423 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 &
	     rg_state_1 ;
  assign y__h21546 =
	     rg_state_1 &
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 ;
  assign y__h21554 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136 &
	     rg_state_3 ;
  assign y__h22092 =
	     { rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143[27:0],
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143[63:28] } ;
  assign y__h22094 =
	     { rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143[18:0],
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143[63:19] } ;
  assign y__h22333 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165[38:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165[63:39] } ;
  assign y__h22335 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165[60:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165[63:61] } ;
  assign y__h22574 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181[5:0],
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181[63:6] } ;
  assign y__h22576 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181[0],
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181[63:1] } ;
  assign y__h22815 =
	     { rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198[16:0],
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198[63:17] } ;
  assign y__h22817 =
	     { rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198[9:0],
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198[63:10] } ;
  assign y__h26546 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d263 &
	     rg_state_1 ;
  assign y__h26669 =
	     rg_state_1 &
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d263 ;
  assign y__h26673 = rg_state_3 & rg_state_1 ;
  assign y__h26677 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d263 &
	     rg_state_3 ;
  assign y__h26889 = rg_state_3 & rg_state_0 ;
  assign y__h26997 = rg_state_1 & rg_state_0 ;
  assign y__h27215 =
	     { rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d269[27:0],
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d269[63:28] } ;
  assign y__h27217 =
	     { rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d269[18:0],
	       rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d269[63:19] } ;
  assign y__h27456 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d278[38:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d278[63:39] } ;
  assign y__h27458 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d278[60:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d278[63:61] } ;
  assign y__h27697 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d281[5:0],
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d281[63:6] } ;
  assign y__h27699 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d281[0],
	       INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d281[63:1] } ;
  assign y__h27938 =
	     { rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d284[16:0],
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d284[63:17] } ;
  assign y__h27940 =
	     { rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d284[9:0],
	       rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d284[63:10] } ;
  assign y__h28179 = { x__h28180[40:0], x__h28180[63:41] } ;
  assign y__h28181 = { x__h28180[6:0], x__h28180[63:7] } ;
  assign y__h4605 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign y__h4609 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign y__h4732 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign y__h4736 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign y__h4740 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 &
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign y__h4952 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign y__h5278 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[27:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[63:28] } ;
  assign y__h5280 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[18:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[63:19] } ;
  assign y__h5519 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61[38:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61[63:39] } ;
  assign y__h5521 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61[60:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61[63:61] } ;
  assign y__h5760 =
	     { INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76[5:0],
	       INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76[63:6] } ;
  assign y__h5762 =
	     { INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76[0],
	       INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76[63:1] } ;
  assign y__h6001 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94[16:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94[63:17] } ;
  assign y__h6003 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94[9:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94[63:10] } ;
  assign y__h6242 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108[40:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108[63:41] } ;
  assign y__h6244 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108[6:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108[63:7] } ;
  always@(x__h25687)
  begin
    case (x__h25687)
      4'd0: y__h25671 = 64'd75;
      4'd1: y__h25671 = 64'd90;
      4'd2: y__h25671 = 64'd105;
      4'd3: y__h25671 = 64'd120;
      4'd4: y__h25671 = 64'd135;
      4'd5: y__h25671 = 64'd150;
      4'd6: y__h25671 = 64'd165;
      4'd7: y__h25671 = 64'd180;
      4'd8: y__h25671 = 64'd195;
      4'd9: y__h25671 = 64'd210;
      4'd10: y__h25671 = 64'd225;
      4'd11: y__h25671 = 64'd240;
      default: y__h25671 = 64'b0 /* unspecified value */ ;
    endcase
  end
  always@(x__h20564)
  begin
    case (x__h20564)
      4'd0: y__h20548 = 64'd75;
      4'd1: y__h20548 = 64'd90;
      4'd2: y__h20548 = 64'd105;
      4'd3: y__h20548 = 64'd120;
      4'd4: y__h20548 = 64'd135;
      4'd5: y__h20548 = 64'd150;
      4'd6: y__h20548 = 64'd165;
      4'd7: y__h20548 = 64'd180;
      4'd8: y__h20548 = 64'd195;
      4'd9: y__h20548 = 64'd210;
      4'd10: y__h20548 = 64'd225;
      4'd11: y__h20548 = 64'd240;
      default: y__h20548 = 64'b0 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 4'd0;
	fsm_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	iv_constant <= `BSV_ASSIGNMENT_DELAY 64'h80800C0800000000;
	ready_ciphertext <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ready_decrypted_data <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ready_decrypted_tag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ready_tag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	req_associated_data <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_decrypted_data_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_decrypted_data_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_decryption_tag_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_decryption_tag_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encrypted_data_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encrypted_data_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encryption_tag_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encryption_tag_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_interface_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_state_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	select <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (counter_EN) counter <= `BSV_ASSIGNMENT_DELAY counter_D_IN;
	if (fsm_state_EN) fsm_state <= `BSV_ASSIGNMENT_DELAY fsm_state_D_IN;
	if (iv_constant_EN)
	  iv_constant <= `BSV_ASSIGNMENT_DELAY iv_constant_D_IN;
	if (ready_ciphertext_EN)
	  ready_ciphertext <= `BSV_ASSIGNMENT_DELAY ready_ciphertext_D_IN;
	if (ready_decrypted_data_EN)
	  ready_decrypted_data <= `BSV_ASSIGNMENT_DELAY
	      ready_decrypted_data_D_IN;
	if (ready_decrypted_tag_EN)
	  ready_decrypted_tag <= `BSV_ASSIGNMENT_DELAY
	      ready_decrypted_tag_D_IN;
	if (ready_tag_EN) ready_tag <= `BSV_ASSIGNMENT_DELAY ready_tag_D_IN;
	if (req_associated_data_EN)
	  req_associated_data <= `BSV_ASSIGNMENT_DELAY
	      req_associated_data_D_IN;
	if (rg_decrypted_data_0_EN)
	  rg_decrypted_data_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_decrypted_data_0_D_IN;
	if (rg_decrypted_data_1_EN)
	  rg_decrypted_data_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_decrypted_data_1_D_IN;
	if (rg_decryption_tag_0_EN)
	  rg_decryption_tag_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_decryption_tag_0_D_IN;
	if (rg_decryption_tag_1_EN)
	  rg_decryption_tag_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_decryption_tag_1_D_IN;
	if (rg_encrypted_data_0_EN)
	  rg_encrypted_data_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_encrypted_data_0_D_IN;
	if (rg_encrypted_data_1_EN)
	  rg_encrypted_data_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_encrypted_data_1_D_IN;
	if (rg_encryption_tag_0_EN)
	  rg_encryption_tag_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_encryption_tag_0_D_IN;
	if (rg_encryption_tag_1_EN)
	  rg_encryption_tag_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_encryption_tag_1_D_IN;
	if (rg_interface_0_EN)
	  rg_interface_0 <= `BSV_ASSIGNMENT_DELAY rg_interface_0_D_IN;
	if (rg_interface_1_EN)
	  rg_interface_1 <= `BSV_ASSIGNMENT_DELAY rg_interface_1_D_IN;
	if (rg_interface_2_EN)
	  rg_interface_2 <= `BSV_ASSIGNMENT_DELAY rg_interface_2_D_IN;
	if (rg_interface_3_EN)
	  rg_interface_3 <= `BSV_ASSIGNMENT_DELAY rg_interface_3_D_IN;
	if (rg_state_0_EN)
	  rg_state_0 <= `BSV_ASSIGNMENT_DELAY rg_state_0_D_IN;
	if (rg_state_1_EN)
	  rg_state_1 <= `BSV_ASSIGNMENT_DELAY rg_state_1_D_IN;
	if (rg_state_2_EN)
	  rg_state_2 <= `BSV_ASSIGNMENT_DELAY rg_state_2_D_IN;
	if (rg_state_3_EN)
	  rg_state_3 <= `BSV_ASSIGNMENT_DELAY rg_state_3_D_IN;
	if (rg_state_4_EN)
	  rg_state_4 <= `BSV_ASSIGNMENT_DELAY rg_state_4_D_IN;
	if (select_EN) select <= `BSV_ASSIGNMENT_DELAY select_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter = 4'hA;
    fsm_state = 3'h2;
    iv_constant = 64'hAAAAAAAAAAAAAAAA;
    ready_ciphertext = 1'h0;
    ready_decrypted_data = 1'h0;
    ready_decrypted_tag = 1'h0;
    ready_tag = 1'h0;
    req_associated_data = 1'h0;
    rg_decrypted_data_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_decrypted_data_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_decryption_tag_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_decryption_tag_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_encrypted_data_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_encrypted_data_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_encryption_tag_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_encryption_tag_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_interface_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_2 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_3 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_4 = 64'hAAAAAAAAAAAAAAAA;
    select = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
  
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4 &&
	  counter != 4'd0)
	$display("local_state=%h,%h,%h,%h,%h",
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d61,
		 INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d76,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d94,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d108);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d69,
		 INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d84,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d102,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d116);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4)
	$display("new_rg_state %h %h",
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[319:256],
		 rg_state_0_2_CONCAT_rg_state_1_4_CONCAT_rg_sta_ETC___d49[255:192]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198,
		 x__h28180);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198,
		 x__h28180);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_encryption_state && counter == 4'd0)
	$display("rg_encrypted_data=%h%h",
		 rg_encrypted_data_0,
		 rg_encrypted_data_1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_encryption_state && counter == 4'd0)
	$display("encryption_result=%h%h",
		 encryption0__h16560,
		 encryption1__h16561);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decryption_state && counter == 4'd0)
	$display("rg_encrypted_data=%h%h",
		 rg_decrypted_data_0,
		 rg_decrypted_data_1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decryption_state && counter == 4'd0)
	$display("encryption_result=%h%h",
		 encryption0__h16560,
		 encryption1__h16561);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter == 4'd8)
	$display("processed_data1%h",
		 320'h80000000000000000000000000000000000000000000000000000000000000000000000000000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter == 4'd8)
	$display("packed_pre_finalized_data%h",
		 packed_pre_finalized_data__h23783);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter == 4'd8)
	$display("lv_updated_finalized_data%h",
		 lv_updated_finalized_data__h24455);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter == 4'd8)
	$display("lv_finalized_key%h", lv_finalized_key__h24489);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter != 4'd8)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter != 4'd8)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d136,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter != 4'd8)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d143,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d165,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d181,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d198,
		 x__h28180);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_encrypt_decrypt_state && counter != 4'd8)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d151,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d173,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d189,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d206,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d263,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d269,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d278,
		 INV_rg_state_4_0_AND_rg_state_3_8_77_XOR_rg_st_ETC___d281,
		 rg_state_4_0_AND_rg_state_0_2_91_XOR_rg_state__ETC___d284,
		 x__h28180);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 x__h27214 ^ y__h27215,
		 x__h27455 ^ y__h27456,
		 x__h27696 ^ y__h27697,
		 x__h27937 ^ y__h27938,
		 rg_state_4_0_AND_rg_state_1_4_32_XOR_rg_state__ETC___d219);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 && select)
	$display("encryption_tag0%h", encryption_tag0__h29252);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 && select)
	$display("encryption_tag1%h", encryption_tag1__h29253);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 && !select)
	$display("encryption_tag0%h", encryption_tag0__h29252);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state && !counter_ULT_12___d4 && !select)
	$display("encryption_tag1%h", encryption_tag1__h29253);
  end
  // synopsys translate_on
endmodule  // mkAscon_engine

