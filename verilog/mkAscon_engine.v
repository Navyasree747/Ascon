//
// Generated by Bluespec Compiler, version untagged-g2930c314 (build 2930c314)
//
// On Sat Nov  9 11:05:10 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_input_function             O     1 const
// ciphertext                     O   128 reg
// RDY_ciphertext                 O     1 reg
// tag                            O   128 reg
// RDY_tag                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// input_function_plaintext       I   128 reg
// input_function_associated_data  I   128 reg
// input_function_key             I   128 reg
// input_function_nonce           I   128 reg
// EN_input_function              I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAscon_engine(CLK,
		      RST_N,

		      input_function_plaintext,
		      input_function_associated_data,
		      input_function_key,
		      input_function_nonce,
		      EN_input_function,
		      RDY_input_function,

		      ciphertext,
		      RDY_ciphertext,

		      tag,
		      RDY_tag);
  input  CLK;
  input  RST_N;

  // action method input_function
  input  [127 : 0] input_function_plaintext;
  input  [127 : 0] input_function_associated_data;
  input  [127 : 0] input_function_key;
  input  [127 : 0] input_function_nonce;
  input  EN_input_function;
  output RDY_input_function;

  // value method ciphertext
  output [127 : 0] ciphertext;
  output RDY_ciphertext;

  // value method tag
  output [127 : 0] tag;
  output RDY_tag;

  // signals for module outputs
  wire [127 : 0] ciphertext, tag;
  wire RDY_ciphertext, RDY_input_function, RDY_tag;

  // register counter
  reg [3 : 0] counter;
  reg [3 : 0] counter_D_IN;
  wire counter_EN;

  // register fsm_state
  reg [2 : 0] fsm_state;
  reg [2 : 0] fsm_state_D_IN;
  wire fsm_state_EN;

  // register iv_constant
  reg [63 : 0] iv_constant;
  wire [63 : 0] iv_constant_D_IN;
  wire iv_constant_EN;

  // register ready_ciphertext
  reg ready_ciphertext;
  wire ready_ciphertext_D_IN, ready_ciphertext_EN;

  // register ready_tag
  reg ready_tag;
  wire ready_tag_D_IN, ready_tag_EN;

  // register req_associated_data
  reg req_associated_data;
  wire req_associated_data_D_IN, req_associated_data_EN;

  // register rg_encrypted_data_0
  reg [63 : 0] rg_encrypted_data_0;
  wire [63 : 0] rg_encrypted_data_0_D_IN;
  wire rg_encrypted_data_0_EN;

  // register rg_encrypted_data_1
  reg [63 : 0] rg_encrypted_data_1;
  wire [63 : 0] rg_encrypted_data_1_D_IN;
  wire rg_encrypted_data_1_EN;

  // register rg_encryption_tag_0
  reg [63 : 0] rg_encryption_tag_0;
  wire [63 : 0] rg_encryption_tag_0_D_IN;
  wire rg_encryption_tag_0_EN;

  // register rg_encryption_tag_1
  reg [63 : 0] rg_encryption_tag_1;
  wire [63 : 0] rg_encryption_tag_1_D_IN;
  wire rg_encryption_tag_1_EN;

  // register rg_interface_0
  reg [127 : 0] rg_interface_0;
  wire [127 : 0] rg_interface_0_D_IN;
  wire rg_interface_0_EN;

  // register rg_interface_1
  reg [127 : 0] rg_interface_1;
  wire [127 : 0] rg_interface_1_D_IN;
  wire rg_interface_1_EN;

  // register rg_interface_2
  reg [127 : 0] rg_interface_2;
  wire [127 : 0] rg_interface_2_D_IN;
  wire rg_interface_2_EN;

  // register rg_interface_3
  reg [127 : 0] rg_interface_3;
  wire [127 : 0] rg_interface_3_D_IN;
  wire rg_interface_3_EN;

  // register rg_state_0
  reg [63 : 0] rg_state_0;
  reg [63 : 0] rg_state_0_D_IN;
  wire rg_state_0_EN;

  // register rg_state_1
  reg [63 : 0] rg_state_1;
  reg [63 : 0] rg_state_1_D_IN;
  wire rg_state_1_EN;

  // register rg_state_2
  reg [63 : 0] rg_state_2;
  reg [63 : 0] rg_state_2_D_IN;
  wire rg_state_2_EN;

  // register rg_state_3
  reg [63 : 0] rg_state_3;
  reg [63 : 0] rg_state_3_D_IN;
  wire rg_state_3_EN;

  // register rg_state_4
  reg [63 : 0] rg_state_4;
  reg [63 : 0] rg_state_4_D_IN;
  wire rg_state_4_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_associated_data_state,
       CAN_FIRE_RL_encryption_state,
       CAN_FIRE_RL_finalization_state,
       CAN_FIRE_RL_intialization_state,
       CAN_FIRE_RL_permutate_associated_data_state,
       CAN_FIRE_input_function,
       WILL_FIRE_RL_associated_data_state,
       WILL_FIRE_RL_encryption_state,
       WILL_FIRE_RL_finalization_state,
       WILL_FIRE_RL_intialization_state,
       WILL_FIRE_RL_permutate_associated_data_state,
       WILL_FIRE_input_function;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_rg_state_0_write_1__VAL_2,
		MUX_rg_state_0_write_1__VAL_3,
		MUX_rg_state_0_write_1__VAL_4,
		MUX_rg_state_0_write_1__VAL_5,
		MUX_rg_state_1_write_1__VAL_2,
		MUX_rg_state_1_write_1__VAL_3,
		MUX_rg_state_1_write_1__VAL_4,
		MUX_rg_state_1_write_1__VAL_5,
		MUX_rg_state_2_write_1__VAL_2,
		MUX_rg_state_2_write_1__VAL_4,
		MUX_rg_state_2_write_1__VAL_5,
		MUX_rg_state_3_write_1__VAL_2,
		MUX_rg_state_3_write_1__VAL_4,
		MUX_rg_state_3_write_1__VAL_5,
		MUX_rg_state_4_write_1__VAL_2,
		MUX_rg_state_4_write_1__VAL_5;
  wire [3 : 0] MUX_counter_write_1__VAL_1,
	       MUX_counter_write_1__VAL_4,
	       MUX_counter_write_1__VAL_5;
  wire MUX_counter_write_1__SEL_1,
       MUX_counter_write_1__SEL_2,
       MUX_fsm_state_write_1__SEL_2,
       MUX_fsm_state_write_1__SEL_3,
       MUX_fsm_state_write_1__SEL_4,
       MUX_fsm_state_write_1__SEL_5,
       MUX_fsm_state_write_1__SEL_6,
       MUX_rg_state_0_write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] y__h13356, y__h19304;
  wire [319 : 0] intialization_output__h6775,
		 lv_updated_asso_data__h12195,
		 packed_associated_data__h11523,
		 padded_key__h6735,
		 padded_key_state__h16617,
		 pre_finalized_state__h17084;
  wire [127 : 0] rg_state_0_2_CONCAT_rg_state_1_4_6_XOR_rg_inte_ETC___d235;
  wire [63 : 0] IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23,
		IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d103,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d109,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d117,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d62,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d70,
		IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d95,
		INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d77,
		INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d85,
		INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d183,
		INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191,
		INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d269,
		din__h12423,
		encryption0__h16813,
		encryption1__h16814,
		rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138,
		rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d251,
		rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d200,
		rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d208,
		rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d272,
		rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d145,
		rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d153,
		rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d221,
		rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d257,
		rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d167,
		rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d175,
		rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d266,
		x__h10893,
		x__h10982,
		x__h14222,
		x__h14224,
		x__h14226,
		x__h14228,
		x__h14349,
		x__h14351,
		x__h14353,
		x__h14355,
		x__h14357,
		x__h14359,
		x__h14489,
		x__h14563,
		x__h14565,
		x__h14899,
		x__h15140,
		x__h15381,
		x__h15622,
		x__h20170,
		x__h20172,
		x__h20174,
		x__h20176,
		x__h20178,
		x__h20297,
		x__h20299,
		x__h20301,
		x__h20303,
		x__h20305,
		x__h20307,
		x__h20437,
		x__h20439,
		x__h20441,
		x__h20511,
		x__h20513,
		x__h20515,
		x__h20517,
		x__h20519,
		x__h20521,
		x__h20627,
		x__h20629,
		x__h20631,
		x__h20633,
		x__h20847,
		x__h21088,
		x__h21329,
		x__h21570,
		x__h21811,
		x__h21813,
		x__h3980,
		x__h3982,
		x__h3984,
		x__h3986,
		x__h3988,
		x__h3990,
		x__h4107,
		x__h4109,
		x__h4111,
		x__h4113,
		x__h4115,
		x__h4117,
		x__h4247,
		x__h4249,
		x__h4251,
		x__h4321,
		x__h4323,
		x__h4325,
		x__h4327,
		x__h4329,
		x__h4331,
		x__h4437,
		x__h4439,
		x__h4441,
		x__h4657,
		x__h4898,
		x__h5139,
		x__h5380,
		x__h5621,
		y__h14231,
		y__h14354,
		y__h14362,
		y__h14900,
		y__h14902,
		y__h15141,
		y__h15143,
		y__h15382,
		y__h15384,
		y__h15623,
		y__h15625,
		y__h20179,
		y__h20302,
		y__h20306,
		y__h20310,
		y__h20522,
		y__h20630,
		y__h20848,
		y__h20850,
		y__h21089,
		y__h21091,
		y__h21330,
		y__h21332,
		y__h21571,
		y__h21573,
		y__h21812,
		y__h21814,
		y__h3985,
		y__h3989,
		y__h4112,
		y__h4116,
		y__h4120,
		y__h4332,
		y__h4658,
		y__h4660,
		y__h4899,
		y__h4901,
		y__h5140,
		y__h5142,
		y__h5381,
		y__h5383,
		y__h5622,
		y__h5624;
  wire [3 : 0] x__h13372, x__h19320, x__h22665;
  wire counter_ULT_12___d4;

  // action method input_function
  assign RDY_input_function = 1'd1 ;
  assign CAN_FIRE_input_function = 1'd1 ;
  assign WILL_FIRE_input_function = EN_input_function ;

  // value method ciphertext
  assign ciphertext = { rg_encrypted_data_1, rg_encrypted_data_0 } ;
  assign RDY_ciphertext = ready_ciphertext ;

  // value method tag
  assign tag = { rg_encryption_tag_1, rg_encryption_tag_0 } ;
  assign RDY_tag = ready_tag ;

  // rule RL_intialization_state
  assign CAN_FIRE_RL_intialization_state = fsm_state == 3'd1 ;
  assign WILL_FIRE_RL_intialization_state = CAN_FIRE_RL_intialization_state ;

  // rule RL_associated_data_state
  assign CAN_FIRE_RL_associated_data_state = fsm_state == 3'd2 ;
  assign WILL_FIRE_RL_associated_data_state =
	     CAN_FIRE_RL_associated_data_state ;

  // rule RL_permutate_associated_data_state
  assign CAN_FIRE_RL_permutate_associated_data_state = fsm_state == 3'd3 ;
  assign WILL_FIRE_RL_permutate_associated_data_state =
	     CAN_FIRE_RL_permutate_associated_data_state ;

  // rule RL_encryption_state
  assign CAN_FIRE_RL_encryption_state = fsm_state == 3'd4 ;
  assign WILL_FIRE_RL_encryption_state = CAN_FIRE_RL_encryption_state ;

  // rule RL_finalization_state
  assign CAN_FIRE_RL_finalization_state = fsm_state == 3'd5 ;
  assign WILL_FIRE_RL_finalization_state = CAN_FIRE_RL_finalization_state ;

  // inputs to muxes for submodule ports
  assign MUX_counter_write_1__SEL_1 =
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ;
  assign MUX_counter_write_1__SEL_2 =
	     WILL_FIRE_RL_finalization_state && counter != 4'd12 ;
  assign MUX_fsm_state_write_1__SEL_2 =
	     WILL_FIRE_RL_finalization_state && counter == 4'd12 ;
  assign MUX_fsm_state_write_1__SEL_3 =
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ;
  assign MUX_fsm_state_write_1__SEL_4 =
	     WILL_FIRE_RL_permutate_associated_data_state && counter == 4'd8 ;
  assign MUX_fsm_state_write_1__SEL_5 =
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter == 4'd8 ;
  assign MUX_fsm_state_write_1__SEL_6 =
	     WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4 ;
  assign MUX_rg_state_0_write_1__SEL_1 =
	     WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8 ;
  assign MUX_counter_write_1__VAL_1 = (counter == 4'd8) ? 4'd0 : x__h22665 ;
  assign MUX_counter_write_1__VAL_4 = counter_ULT_12___d4 ? x__h22665 : 4'd0 ;
  assign MUX_counter_write_1__VAL_5 = (counter == 4'd0) ? x__h22665 : 4'd0 ;
  assign MUX_rg_state_0_write_1__VAL_2 = x__h20847 ^ y__h20848 ;
  assign MUX_rg_state_0_write_1__VAL_3 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45 :
	       intialization_output__h6775[319:256] ;
  assign MUX_rg_state_0_write_1__VAL_4 =
	     req_associated_data ?
	       x__h10893 :
	       ((counter == 4'd8) ?
		  din__h12423 :
		  rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d153) ;
  assign MUX_rg_state_0_write_1__VAL_5 =
	     (counter == 4'd0) ?
	       encryption0__h16813 :
	       rg_state_0_2_CONCAT_rg_state_1_4_6_XOR_rg_inte_ETC___d235[127:64] ;
  assign MUX_rg_state_1_write_1__VAL_2 = x__h21088 ^ y__h21089 ;
  assign MUX_rg_state_1_write_1__VAL_3 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d70 :
	       intialization_output__h6775[255:192] ;
  assign MUX_rg_state_1_write_1__VAL_4 =
	     req_associated_data ?
	       x__h10982 :
	       ((counter == 4'd8) ?
		  rg_state_1 :
		  rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d175) ;
  assign MUX_rg_state_1_write_1__VAL_5 =
	     (counter == 4'd0) ?
	       encryption1__h16814 :
	       rg_state_0_2_CONCAT_rg_state_1_4_6_XOR_rg_inte_ETC___d235[63:0] ;
  assign MUX_rg_state_2_write_1__VAL_2 =
	     (counter == 4'd8) ?
	       rg_state_2 :
	       INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191 ;
  assign MUX_rg_state_2_write_1__VAL_4 = x__h21329 ^ y__h21330 ;
  assign MUX_rg_state_2_write_1__VAL_5 =
	     counter_ULT_12___d4 ?
	       INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d85 :
	       intialization_output__h6775[191:128] ;
  assign MUX_rg_state_3_write_1__VAL_2 =
	     (counter == 4'd8) ?
	       rg_state_3 :
	       rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d208 ;
  assign MUX_rg_state_3_write_1__VAL_4 = x__h21570 ^ y__h21571 ;
  assign MUX_rg_state_3_write_1__VAL_5 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d103 :
	       intialization_output__h6775[127:64] ;
  assign MUX_rg_state_4_write_1__VAL_2 =
	     (counter == 4'd8) ?
	       rg_state_4 :
	       rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d221 ;
  assign MUX_rg_state_4_write_1__VAL_5 =
	     counter_ULT_12___d4 ?
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d117 :
	       intialization_output__h6775[63:0] ;

  // register counter
  always@(MUX_counter_write_1__SEL_1 or
	  MUX_counter_write_1__VAL_1 or
	  MUX_counter_write_1__SEL_2 or
	  x__h22665 or
	  WILL_FIRE_RL_permutate_associated_data_state or
	  WILL_FIRE_RL_intialization_state or
	  MUX_counter_write_1__VAL_4 or
	  WILL_FIRE_RL_encryption_state or MUX_counter_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_counter_write_1__SEL_1: counter_D_IN = MUX_counter_write_1__VAL_1;
      MUX_counter_write_1__SEL_2: counter_D_IN = x__h22665;
      WILL_FIRE_RL_permutate_associated_data_state:
	  counter_D_IN = MUX_counter_write_1__VAL_1;
      WILL_FIRE_RL_intialization_state:
	  counter_D_IN = MUX_counter_write_1__VAL_4;
      WILL_FIRE_RL_encryption_state:
	  counter_D_IN = MUX_counter_write_1__VAL_5;
      default: counter_D_IN = 4'b0 /* unspecified value */ ;
    endcase
  end
  assign counter_EN =
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_finalization_state && counter != 4'd12 ||
	     WILL_FIRE_RL_permutate_associated_data_state ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_encryption_state ;

  // register fsm_state
  always@(EN_input_function or
	  MUX_fsm_state_write_1__SEL_2 or
	  MUX_fsm_state_write_1__SEL_3 or
	  MUX_fsm_state_write_1__SEL_4 or
	  MUX_fsm_state_write_1__SEL_5 or MUX_fsm_state_write_1__SEL_6)
  case (1'b1)
    EN_input_function: fsm_state_D_IN = 3'd1;
    MUX_fsm_state_write_1__SEL_2: fsm_state_D_IN = 3'd0;
    MUX_fsm_state_write_1__SEL_3: fsm_state_D_IN = 3'd5;
    MUX_fsm_state_write_1__SEL_4: fsm_state_D_IN = 3'd4;
    MUX_fsm_state_write_1__SEL_5: fsm_state_D_IN = 3'd3;
    MUX_fsm_state_write_1__SEL_6: fsm_state_D_IN = 3'd2;
    default: fsm_state_D_IN = 3'b0 /* unspecified value */ ;
  endcase
  assign fsm_state_EN =
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter == 4'd8 ||
	     WILL_FIRE_RL_finalization_state && counter == 4'd12 ||
	     WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	     counter == 4'd8 ||
	     EN_input_function ;

  // register iv_constant
  assign iv_constant_D_IN = 64'h0 ;
  assign iv_constant_EN = 1'b0 ;

  // register ready_ciphertext
  assign ready_ciphertext_D_IN = 1'd1 ;
  assign ready_ciphertext_EN =
	     WILL_FIRE_RL_encryption_state && counter == 4'd0 ;

  // register ready_tag
  assign ready_tag_D_IN = 1'd1 ;
  assign ready_tag_EN = MUX_fsm_state_write_1__SEL_2 ;

  // register req_associated_data
  assign req_associated_data_D_IN = 1'd0 ;
  assign req_associated_data_EN =
	     WILL_FIRE_RL_associated_data_state && req_associated_data ;

  // register rg_encrypted_data_0
  assign rg_encrypted_data_0_D_IN = 64'h0 ;
  assign rg_encrypted_data_0_EN = 1'b0 ;

  // register rg_encrypted_data_1
  assign rg_encrypted_data_1_D_IN = 64'h0 ;
  assign rg_encrypted_data_1_EN = 1'b0 ;

  // register rg_encryption_tag_0
  assign rg_encryption_tag_0_D_IN = rg_interface_0[127:64] ^ rg_state_0 ;
  assign rg_encryption_tag_0_EN = MUX_fsm_state_write_1__SEL_2 ;

  // register rg_encryption_tag_1
  assign rg_encryption_tag_1_D_IN = rg_interface_0[63:0] ^ rg_state_1 ;
  assign rg_encryption_tag_1_EN = MUX_fsm_state_write_1__SEL_2 ;

  // register rg_interface_0
  assign rg_interface_0_D_IN = input_function_key ;
  assign rg_interface_0_EN = EN_input_function ;

  // register rg_interface_1
  assign rg_interface_1_D_IN = input_function_plaintext ;
  assign rg_interface_1_EN = EN_input_function ;

  // register rg_interface_2
  assign rg_interface_2_D_IN = input_function_associated_data ;
  assign rg_interface_2_EN = EN_input_function ;

  // register rg_interface_3
  assign rg_interface_3_D_IN = input_function_nonce ;
  assign rg_interface_3_EN = EN_input_function ;

  // register rg_state_0
  always@(MUX_rg_state_0_write_1__SEL_1 or
	  rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d153 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_rg_state_0_write_1__VAL_2 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_0_write_1__VAL_3 or
	  WILL_FIRE_RL_associated_data_state or
	  MUX_rg_state_0_write_1__VAL_4 or
	  WILL_FIRE_RL_encryption_state or MUX_rg_state_0_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state_0_write_1__SEL_1:
	  rg_state_0_D_IN =
	      rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d153;
      MUX_counter_write_1__SEL_2:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_2;
      WILL_FIRE_RL_intialization_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_3;
      WILL_FIRE_RL_associated_data_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_4;
      WILL_FIRE_RL_encryption_state:
	  rg_state_0_D_IN = MUX_rg_state_0_write_1__VAL_5;
      default: rg_state_0_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_0_EN =
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_finalization_state && counter != 4'd12 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_associated_data_state ||
	     WILL_FIRE_RL_encryption_state ;

  // register rg_state_1
  always@(MUX_rg_state_0_write_1__SEL_1 or
	  rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d175 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_rg_state_1_write_1__VAL_2 or
	  WILL_FIRE_RL_intialization_state or
	  MUX_rg_state_1_write_1__VAL_3 or
	  WILL_FIRE_RL_associated_data_state or
	  MUX_rg_state_1_write_1__VAL_4 or
	  WILL_FIRE_RL_encryption_state or MUX_rg_state_1_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state_0_write_1__SEL_1:
	  rg_state_1_D_IN =
	      rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d175;
      MUX_counter_write_1__SEL_2:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_2;
      WILL_FIRE_RL_intialization_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_3;
      WILL_FIRE_RL_associated_data_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_4;
      WILL_FIRE_RL_encryption_state:
	  rg_state_1_D_IN = MUX_rg_state_1_write_1__VAL_5;
      default: rg_state_1_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_1_EN =
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_finalization_state && counter != 4'd12 ||
	     WILL_FIRE_RL_intialization_state ||
	     WILL_FIRE_RL_associated_data_state ||
	     WILL_FIRE_RL_encryption_state ;

  // register rg_state_2
  always@(MUX_fsm_state_write_1__SEL_3 or
	  rg_state_2 or
	  MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_2_write_1__VAL_2 or
	  MUX_rg_state_0_write_1__SEL_1 or
	  INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_rg_state_2_write_1__VAL_4 or
	  WILL_FIRE_RL_intialization_state or MUX_rg_state_2_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fsm_state_write_1__SEL_3: rg_state_2_D_IN = rg_state_2;
      MUX_counter_write_1__SEL_1:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_2;
      MUX_rg_state_0_write_1__SEL_1:
	  rg_state_2_D_IN =
	      INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191;
      MUX_counter_write_1__SEL_2:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_4;
      WILL_FIRE_RL_intialization_state:
	  rg_state_2_D_IN = MUX_rg_state_2_write_1__VAL_5;
      default: rg_state_2_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_2_EN =
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_finalization_state && counter != 4'd12 ||
	     WILL_FIRE_RL_intialization_state ;

  // register rg_state_3
  always@(MUX_fsm_state_write_1__SEL_3 or
	  rg_state_3 or
	  MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_3_write_1__VAL_2 or
	  MUX_rg_state_0_write_1__SEL_1 or
	  rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d208 or
	  MUX_counter_write_1__SEL_2 or
	  MUX_rg_state_3_write_1__VAL_4 or
	  WILL_FIRE_RL_intialization_state or MUX_rg_state_3_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fsm_state_write_1__SEL_3: rg_state_3_D_IN = rg_state_3;
      MUX_counter_write_1__SEL_1:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_2;
      MUX_rg_state_0_write_1__SEL_1:
	  rg_state_3_D_IN =
	      rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d208;
      MUX_counter_write_1__SEL_2:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_4;
      WILL_FIRE_RL_intialization_state:
	  rg_state_3_D_IN = MUX_rg_state_3_write_1__VAL_5;
      default: rg_state_3_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_3_EN =
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_finalization_state && counter != 4'd12 ||
	     WILL_FIRE_RL_intialization_state ;

  // register rg_state_4
  always@(MUX_fsm_state_write_1__SEL_3 or
	  rg_state_4 or
	  MUX_counter_write_1__SEL_1 or
	  MUX_rg_state_4_write_1__VAL_2 or
	  MUX_rg_state_0_write_1__SEL_1 or
	  rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d221 or
	  MUX_counter_write_1__SEL_2 or
	  WILL_FIRE_RL_intialization_state or MUX_rg_state_4_write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fsm_state_write_1__SEL_3: rg_state_4_D_IN = rg_state_4;
      MUX_counter_write_1__SEL_1:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_2;
      MUX_rg_state_0_write_1__SEL_1:
	  rg_state_4_D_IN =
	      rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d221;
      MUX_counter_write_1__SEL_2:
	  rg_state_4_D_IN =
	      rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d221;
      WILL_FIRE_RL_intialization_state:
	  rg_state_4_D_IN = MUX_rg_state_4_write_1__VAL_5;
      default: rg_state_4_D_IN = 64'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_state_4_EN =
	     WILL_FIRE_RL_encryption_state && counter != 4'd0 ||
	     WILL_FIRE_RL_associated_data_state && !req_associated_data ||
	     WILL_FIRE_RL_permutate_associated_data_state &&
	     counter != 4'd8 ||
	     WILL_FIRE_RL_finalization_state && counter != 4'd12 ||
	     WILL_FIRE_RL_intialization_state ;

  // remaining internal signals
  assign IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 =
	     (counter == 4'd0) ? iv_constant : rg_state_0 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 =
	     (counter == 4'd0) ? rg_interface_0[127:64] : rg_state_1 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23 =
	     (counter == 4'd0) ? rg_interface_0[63:0] : rg_state_2 ;
  assign IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23 ^
	     y__h19304 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 =
	     (counter == 4'd0) ? rg_interface_3[127:64] : rg_state_3 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d103 =
	     x__h5380 ^ y__h5381 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d109 =
	     x__h4437 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 =
	     (counter == 4'd0) ? rg_interface_3[63:0] : rg_state_4 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d117 =
	     x__h5621 ^ y__h5622 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37 =
	     x__h3980 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45 =
	     x__h4657 ^ y__h4658 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d62 =
	     x__h4107 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d70 =
	     x__h4898 ^ y__h4899 ;
  assign IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d95 =
	     x__h4321 ^
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d77 =
	     ~(x__h4247 ^
	       IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15) ;
  assign INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d85 =
	     x__h5139 ^ y__h5140 ;
  assign INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d183 =
	     ~(x__h14489 ^ rg_state_1) ;
  assign INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191 =
	     x__h15381 ^ y__h15382 ;
  assign INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d269 =
	     ~(x__h20437 ^ rg_state_1) ;
  assign counter_ULT_12___d4 = counter < 4'd12 ;
  assign din__h12423 = { ~rg_state_0[63], rg_state_0[62:0] } ;
  assign encryption0__h16813 = rg_interface_1[127:64] ^ rg_state_0 ;
  assign encryption1__h16814 = rg_interface_1[63:0] ^ rg_state_1 ;
  assign intialization_output__h6775 =
	     packed_associated_data__h11523 ^ padded_key__h6735 ;
  assign lv_updated_asso_data__h12195 =
	     { ~rg_state_0[63],
	       rg_state_0[62:0],
	       rg_state_1,
	       rg_state_2,
	       rg_state_3,
	       rg_state_4 } ;
  assign packed_associated_data__h11523 =
	     { rg_state_0, rg_state_1, rg_state_2, rg_state_3, rg_state_4 } ;
  assign padded_key__h6735 = { 192'b0, rg_interface_0 } ;
  assign padded_key_state__h16617 = { rg_interface_0, 192'b0 } ;
  assign pre_finalized_state__h17084 =
	     { rg_state_0_2_CONCAT_rg_state_1_4_6_XOR_rg_inte_ETC___d235,
	       rg_state_2,
	       rg_state_3,
	       rg_state_4 } ;
  assign rg_state_0_2_CONCAT_rg_state_1_4_6_XOR_rg_inte_ETC___d235 =
	     { rg_state_0, rg_state_1 } ^ rg_interface_0 ;
  assign rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138 =
	     rg_state_2 ^ y__h13356 ;
  assign rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d251 =
	     rg_state_2 ^ y__h19304 ;
  assign rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d200 =
	     x__h14563 ^ rg_state_0 ;
  assign rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d208 =
	     x__h15622 ^ y__h15623 ;
  assign rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d272 =
	     x__h20511 ^ rg_state_0 ;
  assign rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d145 =
	     x__h14222 ^ rg_state_0 ;
  assign rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d153 =
	     x__h14899 ^ y__h14900 ;
  assign rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d221 =
	     x__h21811 ^ y__h21812 ;
  assign rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d257 =
	     x__h20170 ^ rg_state_0 ;
  assign rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d167 =
	     x__h14349 ^ rg_state_0 ;
  assign rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d175 =
	     x__h15140 ^ y__h15141 ;
  assign rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d266 =
	     x__h20297 ^ rg_state_0 ;
  assign x__h10893 = rg_interface_2[127:64] ^ rg_state_0 ;
  assign x__h10982 = rg_interface_2[63:0] ^ rg_state_1 ;
  assign x__h13372 = 4'd7 - counter ;
  assign x__h14222 = x__h14224 ^ rg_state_1 ;
  assign x__h14224 = x__h14226 ^ y__h20630 ;
  assign x__h14226 =
	     x__h14228 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138 ;
  assign x__h14228 = x__h20178 ^ y__h14231 ;
  assign x__h14349 = x__h14351 ^ rg_state_1 ;
  assign x__h14351 = x__h14353 ^ y__h14354 ;
  assign x__h14353 =
	     x__h14355 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138 ;
  assign x__h14355 = x__h14357 ^ y__h20306 ;
  assign x__h14357 = x__h14359 ^ rg_state_3 ;
  assign x__h14359 = rg_state_4 ^ y__h14362 ;
  assign x__h14489 =
	     x__h20439 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138 ;
  assign x__h14563 = x__h14565 ^ rg_state_1 ;
  assign x__h14565 =
	     x__h20515 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138 ;
  assign x__h14899 =
	     rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d145 ^
	     y__h14902 ;
  assign x__h15140 =
	     rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d167 ^
	     y__h15143 ;
  assign x__h15381 =
	     INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d183 ^
	     y__h15384 ;
  assign x__h15622 =
	     rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d200 ^
	     y__h15625 ;
  assign x__h19320 = 4'd11 - counter ;
  assign x__h20170 = x__h20172 ^ rg_state_1 ;
  assign x__h20172 = x__h20174 ^ y__h20630 ;
  assign x__h20174 =
	     x__h20176 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d251 ;
  assign x__h20176 = x__h20178 ^ y__h20179 ;
  assign x__h20178 = x__h20633 ^ rg_state_3 ;
  assign x__h20297 = x__h20299 ^ rg_state_1 ;
  assign x__h20299 = x__h20301 ^ y__h20302 ;
  assign x__h20301 =
	     x__h20303 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d251 ;
  assign x__h20303 = x__h20305 ^ y__h20306 ;
  assign x__h20305 = x__h20307 ^ rg_state_3 ;
  assign x__h20307 = rg_state_4 ^ y__h20310 ;
  assign x__h20437 =
	     x__h20439 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d251 ;
  assign x__h20439 = x__h20441 ^ rg_state_4 ;
  assign x__h20441 = rg_state_4 & rg_state_3 ;
  assign x__h20511 = x__h20513 ^ rg_state_1 ;
  assign x__h20513 =
	     x__h20515 ^
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d251 ;
  assign x__h20515 = x__h20517 ^ rg_state_3 ;
  assign x__h20517 = x__h20519 ^ rg_state_4 ;
  assign x__h20519 = x__h20521 ^ y__h20522 ;
  assign x__h20521 = rg_state_4 & rg_state_0 ;
  assign x__h20627 = x__h20629 ^ y__h20630 ;
  assign x__h20629 = x__h20631 ^ rg_state_3 ;
  assign x__h20631 = x__h20633 ^ rg_state_4 ;
  assign x__h20633 = rg_state_4 & rg_state_1 ;
  assign x__h20847 =
	     rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d257 ^
	     y__h20850 ;
  assign x__h21088 =
	     rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d266 ^
	     y__h21091 ;
  assign x__h21329 =
	     INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d269 ^
	     y__h21332 ;
  assign x__h21570 =
	     rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d272 ^
	     y__h21573 ;
  assign x__h21811 = x__h21813 ^ y__h21814 ;
  assign x__h21813 = x__h20627 ^ rg_state_1 ;
  assign x__h22665 = counter + 4'd1 ;
  assign x__h3980 =
	     x__h3982 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h3982 = x__h3984 ^ y__h3985 ;
  assign x__h3984 =
	     x__h3986 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h3986 = x__h3988 ^ y__h3989 ;
  assign x__h3988 =
	     x__h3990 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h3990 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4107 =
	     x__h4109 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4109 = x__h4111 ^ y__h4112 ;
  assign x__h4111 =
	     x__h4113 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4113 = x__h4115 ^ y__h4116 ;
  assign x__h4115 =
	     x__h4117 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4117 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ^
	     y__h4120 ;
  assign x__h4247 =
	     x__h4249 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4249 =
	     x__h4251 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h4251 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4321 =
	     x__h4323 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign x__h4323 =
	     x__h4325 ^
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign x__h4325 =
	     x__h4327 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4327 =
	     x__h4329 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h4329 = x__h4331 ^ y__h4332 ;
  assign x__h4331 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign x__h4437 = x__h4439 ^ y__h3985 ;
  assign x__h4439 =
	     x__h4441 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign x__h4441 =
	     x__h3990 ^
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11 ;
  assign x__h4657 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37 ^
	     y__h4660 ;
  assign x__h4898 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d62 ^
	     y__h4901 ;
  assign x__h5139 =
	     INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d77 ^
	     y__h5142 ;
  assign x__h5380 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d95 ^
	     y__h5383 ;
  assign x__h5621 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d109 ^
	     y__h5624 ;
  assign y__h14231 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138 &
	     rg_state_1 ;
  assign y__h14354 =
	     rg_state_1 &
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138 ;
  assign y__h14362 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138 &
	     rg_state_3 ;
  assign y__h14900 =
	     { rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d145[27:0],
	       rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d145[63:28] } ;
  assign y__h14902 =
	     { rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d145[18:0],
	       rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d145[63:19] } ;
  assign y__h15141 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d167[38:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d167[63:39] } ;
  assign y__h15143 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d167[60:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d167[63:61] } ;
  assign y__h15382 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d183[5:0],
	       INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d183[63:6] } ;
  assign y__h15384 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d183[0],
	       INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d183[63:1] } ;
  assign y__h15623 =
	     { rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d200[16:0],
	       rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d200[63:17] } ;
  assign y__h15625 =
	     { rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d200[9:0],
	       rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d200[63:10] } ;
  assign y__h20179 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d251 &
	     rg_state_1 ;
  assign y__h20302 =
	     rg_state_1 &
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d251 ;
  assign y__h20306 = rg_state_3 & rg_state_1 ;
  assign y__h20310 =
	     rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d251 &
	     rg_state_3 ;
  assign y__h20522 = rg_state_3 & rg_state_0 ;
  assign y__h20630 = rg_state_1 & rg_state_0 ;
  assign y__h20848 =
	     { rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d257[27:0],
	       rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d257[63:28] } ;
  assign y__h20850 =
	     { rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d257[18:0],
	       rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d257[63:19] } ;
  assign y__h21089 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d266[38:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d266[63:39] } ;
  assign y__h21091 =
	     { rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d266[60:0],
	       rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d266[63:61] } ;
  assign y__h21330 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d269[5:0],
	       INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d269[63:6] } ;
  assign y__h21332 =
	     { INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d269[0],
	       INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d269[63:1] } ;
  assign y__h21571 =
	     { rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d272[16:0],
	       rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d272[63:17] } ;
  assign y__h21573 =
	     { rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d272[9:0],
	       rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d272[63:10] } ;
  assign y__h21812 = { x__h21813[40:0], x__h21813[63:41] } ;
  assign y__h21814 = { x__h21813[6:0], x__h21813[63:7] } ;
  assign y__h3985 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign y__h3989 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign y__h4112 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 ;
  assign y__h4116 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 &
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15 ;
  assign y__h4120 =
	     IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27 &
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 ;
  assign y__h4332 =
	     IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19 &
	     IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33 ;
  assign y__h4658 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[27:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[63:28] } ;
  assign y__h4660 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[18:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37[63:19] } ;
  assign y__h4899 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d62[38:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d62[63:39] } ;
  assign y__h4901 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d62[60:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d62[63:61] } ;
  assign y__h5140 =
	     { INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d77[5:0],
	       INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d77[63:6] } ;
  assign y__h5142 =
	     { INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d77[0],
	       INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d77[63:1] } ;
  assign y__h5381 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d95[16:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d95[63:17] } ;
  assign y__h5383 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d95[9:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d95[63:10] } ;
  assign y__h5622 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d109[40:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d109[63:41] } ;
  assign y__h5624 =
	     { IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d109[6:0],
	       IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d109[63:7] } ;
  always@(x__h19320)
  begin
    case (x__h19320)
      4'd0: y__h19304 = 64'd75;
      4'd1: y__h19304 = 64'd90;
      4'd2: y__h19304 = 64'd105;
      4'd3: y__h19304 = 64'd120;
      4'd4: y__h19304 = 64'd135;
      4'd5: y__h19304 = 64'd150;
      4'd6: y__h19304 = 64'd165;
      4'd7: y__h19304 = 64'd180;
      4'd8: y__h19304 = 64'd195;
      4'd9: y__h19304 = 64'd210;
      4'd10: y__h19304 = 64'd225;
      4'd11: y__h19304 = 64'd240;
      default: y__h19304 = 64'b0 /* unspecified value */ ;
    endcase
  end
  always@(x__h13372)
  begin
    case (x__h13372)
      4'd0: y__h13356 = 64'd75;
      4'd1: y__h13356 = 64'd90;
      4'd2: y__h13356 = 64'd105;
      4'd3: y__h13356 = 64'd120;
      4'd4: y__h13356 = 64'd135;
      4'd5: y__h13356 = 64'd150;
      4'd6: y__h13356 = 64'd165;
      4'd7: y__h13356 = 64'd180;
      4'd8: y__h13356 = 64'd195;
      4'd9: y__h13356 = 64'd210;
      4'd10: y__h13356 = 64'd225;
      4'd11: y__h13356 = 64'd240;
      default: y__h13356 = 64'b0 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 4'd0;
	fsm_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	iv_constant <= `BSV_ASSIGNMENT_DELAY 64'h80800C0800000000;
	ready_ciphertext <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ready_tag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	req_associated_data <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_encrypted_data_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encrypted_data_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encryption_tag_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_encryption_tag_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_interface_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_interface_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_state_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (counter_EN) counter <= `BSV_ASSIGNMENT_DELAY counter_D_IN;
	if (fsm_state_EN) fsm_state <= `BSV_ASSIGNMENT_DELAY fsm_state_D_IN;
	if (iv_constant_EN)
	  iv_constant <= `BSV_ASSIGNMENT_DELAY iv_constant_D_IN;
	if (ready_ciphertext_EN)
	  ready_ciphertext <= `BSV_ASSIGNMENT_DELAY ready_ciphertext_D_IN;
	if (ready_tag_EN) ready_tag <= `BSV_ASSIGNMENT_DELAY ready_tag_D_IN;
	if (req_associated_data_EN)
	  req_associated_data <= `BSV_ASSIGNMENT_DELAY
	      req_associated_data_D_IN;
	if (rg_encrypted_data_0_EN)
	  rg_encrypted_data_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_encrypted_data_0_D_IN;
	if (rg_encrypted_data_1_EN)
	  rg_encrypted_data_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_encrypted_data_1_D_IN;
	if (rg_encryption_tag_0_EN)
	  rg_encryption_tag_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_encryption_tag_0_D_IN;
	if (rg_encryption_tag_1_EN)
	  rg_encryption_tag_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_encryption_tag_1_D_IN;
	if (rg_interface_0_EN)
	  rg_interface_0 <= `BSV_ASSIGNMENT_DELAY rg_interface_0_D_IN;
	if (rg_interface_1_EN)
	  rg_interface_1 <= `BSV_ASSIGNMENT_DELAY rg_interface_1_D_IN;
	if (rg_interface_2_EN)
	  rg_interface_2 <= `BSV_ASSIGNMENT_DELAY rg_interface_2_D_IN;
	if (rg_interface_3_EN)
	  rg_interface_3 <= `BSV_ASSIGNMENT_DELAY rg_interface_3_D_IN;
	if (rg_state_0_EN)
	  rg_state_0 <= `BSV_ASSIGNMENT_DELAY rg_state_0_D_IN;
	if (rg_state_1_EN)
	  rg_state_1 <= `BSV_ASSIGNMENT_DELAY rg_state_1_D_IN;
	if (rg_state_2_EN)
	  rg_state_2 <= `BSV_ASSIGNMENT_DELAY rg_state_2_D_IN;
	if (rg_state_3_EN)
	  rg_state_3 <= `BSV_ASSIGNMENT_DELAY rg_state_3_D_IN;
	if (rg_state_4_EN)
	  rg_state_4 <= `BSV_ASSIGNMENT_DELAY rg_state_4_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter = 4'hA;
    fsm_state = 3'h2;
    iv_constant = 64'hAAAAAAAAAAAAAAAA;
    ready_ciphertext = 1'h0;
    ready_tag = 1'h0;
    req_associated_data = 1'h0;
    rg_encrypted_data_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_encrypted_data_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_encryption_tag_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_encryption_tag_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_interface_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_interface_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state_0 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_1 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_2 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_3 = 64'hAAAAAAAAAAAAAAAA;
    rg_state_4 = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
   
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4 &&
	  counter == 4'd0)
	$display("local_state=%h,%h,%h,%h,%h",
		 iv_constant,
		 rg_interface_0[127:64],
		 rg_interface_0[63:0],
		 rg_interface_3[127:64],
		 rg_interface_3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4 &&
	  counter != 4'd0)
	$display("local_state=%h,%h,%h,%h,%h",
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d23,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_iv_constant_1_ELSE_rg_sta_ETC___d33,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_127_ETC___d15,
		 IF_counter_EQ_0_THEN_rg_interface_0_2_BITS_63__ETC___d27,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_127_T_ETC___d19,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d11);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d37,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d62,
		 INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d77,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d95,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d109);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && counter_ULT_12___d4)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d45,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d70,
		 INV_IF_counter_EQ_0_THEN_rg_interface_3_BITS_6_ETC___d85,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d103,
		 IF_counter_EQ_0_THEN_rg_interface_3_BITS_63_TO_ETC___d117);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4)
	$display("newstate ,%h", packed_associated_data__h11523);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4)
	$display("packed_rg_state %h", packed_associated_data__h11523);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4)
	$display("padded_key %h", padded_key__h6735);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4)
	$display("intialization_output %h", intialization_output__h6775);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_intialization_state && !counter_ULT_12___d4)
	$display("new_rg_state %h %h ",
		 intialization_output__h6775[319:256],
		 intialization_output__h6775[255:192]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && req_associated_data)
	$display("rg_interface[2][127:64] %h", rg_interface_2[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && req_associated_data)
	$display("rg_interface[2][63:0] %h", rg_interface_2[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter == 4'd8)
	$display("processed_data,%h",
		 320'h80000000000000000000000000000000000000000000000000000000000000000000000000000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter == 4'd8)
	$display("packed_associated_data %h", packed_associated_data__h11523);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter == 4'd8)
	$display("lv_updated_asso_data %h", lv_updated_asso_data__h12195);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d145,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d167,
		 INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d183,
		 rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d200,
		 x__h21813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_associated_data_state && !req_associated_data &&
	  counter != 4'd8)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d153,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d175,
		 INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191,
		 rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d208,
		 rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d221);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d138,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d145,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d167,
		 INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d183,
		 rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d200,
		 x__h21813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_permutate_associated_data_state && counter != 4'd8)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d153,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d175,
		 INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d191,
		 rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d208,
		 rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d221);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_encryption_state && counter == 4'd0)
	$display("rg_encrypted_data=%h %h",
		 rg_encrypted_data_0,
		 rg_encrypted_data_1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_encryption_state && counter == 4'd0)
	$display("encryption_result %h %h",
		 encryption0__h16813,
		 encryption1__h16814);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_encryption_state && counter != 4'd0)
	$display("lv_padded_key_state%h", padded_key_state__h16617);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_encryption_state && counter != 4'd0)
	$display("pre_finalized state%h", pre_finalized_state__h17084);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state)
	$display("lv_final_rg_state%h",
		 { rg_state_4,
		   rg_state_3,
		   rg_state_2,
		   rg_state_1,
		   rg_state_0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state)
	$display("Iteration %0d - Before add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state)
	$display("Iteration %0d - After add_constant: %h %h %h %h %h",
		 counter,
		 rg_state_0,
		 rg_state_1,
		 rg_state_2_2_XOR_SEL_ARR_75_90_105_120_135_150_ETC___d251,
		 rg_state_3,
		 rg_state_4);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state)
	$display("Iteration %0d - After sbox: %h %h %h %h %h",
		 counter,
		 rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d257,
		 rg_state_4_0_XOR_rg_state_2_2_XOR_SEL_ARR_75_9_ETC___d266,
		 INV_rg_state_4_0_AND_rg_state_3_8_79_XOR_rg_st_ETC___d269,
		 rg_state_4_0_AND_rg_state_0_2_93_XOR_rg_state__ETC___d272,
		 x__h21813);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finalization_state)
	$display("Iteration %0d - After diffusion: %h %h %h %h %h",
		 counter,
		 x__h20847 ^ y__h20848,
		 x__h21088 ^ y__h21089,
		 x__h21329 ^ y__h21330,
		 x__h21570 ^ y__h21571,
		 rg_state_4_0_AND_rg_state_1_4_34_XOR_rg_state__ETC___d221);
  end
  // synopsys translate_on
endmodule  // mkAscon_engine

